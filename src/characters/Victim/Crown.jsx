/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, { useEffect, useRef, useState } from "react";
import { useGLTF, useAnimations } from "@react-three/drei";
import { useGameStore } from "../../store/gameStore";
import * as THREE from "three";
import { StaticCollider } from "bvhecctrl";

const ACTION_MAP = {
	death: "CharacterArmature|Death",
	gunShoot: "CharacterArmature|Gun_Shoot",
	hitReceive: "CharacterArmature|HitRecieve",
	hitReceive2: "CharacterArmature|HitRecieve_2",
	idle: "CharacterArmature|Idle",
	idleGun: "CharacterArmature|Idle_Gun",
	idleGunPointing: "CharacterArmature|Idle_Gun_Pointing",
	idleGunShoot: "CharacterArmature|Idle_Gun_Shoot",
	idleNeutral: "CharacterArmature|Idle_Neutral",
	idleSword: "CharacterArmature|Idle_Sword",
	interact: "CharacterArmature|Interact",
	kickLeft: "CharacterArmature|Kick_Left",
	kickRight: "CharacterArmature|Kick_Right",
	punchLeft: "CharacterArmature|Punch_Left",
	punchRight: "CharacterArmature|Punch_Right",
	roll: "CharacterArmature|Roll",
	run: "CharacterArmature|Run",
	runBack: "CharacterArmature|Run_Back",
	runLeft: "CharacterArmature|Run_Left",
	runRight: "CharacterArmature|Run_Right",
	runShoot: "CharacterArmature|Run_Shoot",
	swordSlash: "CharacterArmature|Sword_Slash",
	walk: "CharacterArmature|Walk",
	wave: "CharacterArmature|Wave",
};

export default function Crown(props) {
	const group = useRef();
	const { nodes, materials, animations } = useGLTF(
		"models/characters/victims/King.glb"
	);
	const { actions } = useAnimations(animations, group);
	const { showInstructions, gameStarted } = useGameStore();
	const [hasPlayed, setHasPlayed] = useState(false);
	const [wavePlayed, setWavePlayed] = useState(false);

	useEffect(() => {
		if (
			!showInstructions &&
			gameStarted &&
			!hasPlayed &&
			!wavePlayed &&
			actions
		) {
			const waveAction = actions[ACTION_MAP.wave];

			if (waveAction) {
				Object.values(actions).forEach((action) => {
					if (action.isRunning()) {
						action.stop();
					}
				});
				waveAction.reset();
				waveAction.setLoop(THREE.LoopRepeat, 1);
				waveAction.clampWhenFinished = false;
				waveAction.play();

				setTimeout(() => {
					setWavePlayed(true);
					console.log("Wave animation should be finished");
				}, 2000);
			}
		}
	}, [showInstructions, gameStarted, actions, hasPlayed, wavePlayed]);

	useEffect(() => {
		if (wavePlayed && !hasPlayed && actions) {
			const deathAction = actions[ACTION_MAP.death];
			if (deathAction) {
				Object.values(actions).forEach((action) => {
					if (action.isRunning()) {
						action.stop();
					}
				});
				deathAction.reset();
				deathAction.setLoop(THREE.LoopOnce);
				deathAction.clampWhenFinished = true;
				deathAction.play();
				setHasPlayed(true);
				console.log("Crown animation has played");
			}
		}
	}, [showInstructions, gameStarted, hasPlayed, actions, wavePlayed]);

	return (
		<StaticCollider>
			<group ref={group} {...props} dispose={null}>
				<group name='Root_Scene'>
					<group name='RootNode'>
						<group
							name='CharacterArmature'
							rotation={[-Math.PI / 2, 0, 0]}
							scale={100}>
							<primitive object={nodes.Root} />
						</group>
						<skinnedMesh
							name='King_Feet'
							geometry={nodes.King_Feet.geometry}
							material={materials.Metal}
							skeleton={nodes.King_Feet.skeleton}
							rotation={[-Math.PI / 2, 0, 0]}
							scale={100}
						/>
						<group name='King_Legs' rotation={[-Math.PI / 2, 0, 0]} scale={100}>
							<skinnedMesh
								name='King_Legs_1'
								geometry={nodes.King_Legs_1.geometry}
								material={materials.Metal}
								skeleton={nodes.King_Legs_1.skeleton}
							/>
							<skinnedMesh
								name='King_Legs_2'
								geometry={nodes.King_Legs_2.geometry}
								material={materials.DarkBrown}
								skeleton={nodes.King_Legs_2.skeleton}
							/>
							<skinnedMesh
								name='King_Legs_3'
								geometry={nodes.King_Legs_3.geometry}
								material={materials.Metal_Dark}
								skeleton={nodes.King_Legs_3.skeleton}
							/>
						</group>
						<group name='King_Body' rotation={[-Math.PI / 2, 0, 0]} scale={100}>
							<skinnedMesh
								name='King_Body_1'
								geometry={nodes.King_Body_1.geometry}
								material={materials.Metal}
								skeleton={nodes.King_Body_1.skeleton}
							/>
							<skinnedMesh
								name='King_Body_2'
								geometry={nodes.King_Body_2.geometry}
								material={materials.Metal_Dark}
								skeleton={nodes.King_Body_2.skeleton}
							/>
							<skinnedMesh
								name='King_Body_3'
								geometry={nodes.King_Body_3.geometry}
								material={materials.Blue}
								skeleton={nodes.King_Body_3.skeleton}
							/>
							<skinnedMesh
								name='King_Body_4'
								geometry={nodes.King_Body_4.geometry}
								material={materials.Beige}
								skeleton={nodes.King_Body_4.skeleton}
							/>
							<skinnedMesh
								name='King_Body_5'
								geometry={nodes.King_Body_5.geometry}
								material={materials.Skin}
								skeleton={nodes.King_Body_5.skeleton}
							/>
						</group>
						<group name='King_Head' rotation={[-Math.PI / 2, 0, 0]} scale={100}>
							<skinnedMesh
								name='King_Head_1'
								geometry={nodes.King_Head_1.geometry}
								material={materials.Skin}
								skeleton={nodes.King_Head_1.skeleton}
							/>
							<skinnedMesh
								name='King_Head_2'
								geometry={nodes.King_Head_2.geometry}
								material={materials.Hair_White}
								skeleton={nodes.King_Head_2.skeleton}
							/>
							<skinnedMesh
								name='King_Head_3'
								geometry={nodes.King_Head_3.geometry}
								material={materials.Eye}
								skeleton={nodes.King_Head_3.skeleton}
							/>
							<skinnedMesh
								name='King_Head_4'
								geometry={nodes.King_Head_4.geometry}
								material={materials.Gold}
								skeleton={nodes.King_Head_4.skeleton}
							/>
						</group>
					</group>
				</group>
			</group>
		</StaticCollider>
	);
}

useGLTF.preload("models/characters/victims/King.glb");

/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, { useRef, useEffect, useState } from "react";
import { useGLTF, useAnimations, Outlines } from "@react-three/drei";
import { useGameStore } from "../../store/gameStore";

const ACTION_MAP = {
	death: "CharacterArmature|Death",
	duck: "CharacterArmature|Duck",
	hitReact: "CharacterArmature|HitReact",
	idle: "CharacterArmature|Idle",
	jump: "CharacterArmature|Jump",
	jumpIdle: "CharacterArmature|Jump_Idle",
	jumpLand: "CharacterArmature|Jump_Land",
	no: "CharacterArmature|No",
	punch: "CharacterArmature|Punch",
	run: "CharacterArmature|Run",
	walk: "CharacterArmature|Walk",
	wave: "CharacterArmature|Wave",
	weapon: "CharacterArmature|Weapon",
	yes: "CharacterArmature|Yes",
};

// export const Cactus = forwardRef(function Cactoro(props) {
export function Cactus(props) {
	const group = useRef();
	const armatureRef = useRef();

	const { nodes, materials, animations } = useGLTF(
		"models/characters/Cactoro.glb"
	);

	const { actions } = useAnimations(animations, group);

	const [hoveredCharacter, setHoveredCharacter] = useState(null);
	console.log("Hovered character: ", hoveredCharacter);
	const npcId = "chained";

	const { interactWithNPC, getNPCAnimation, getNPCDialogStatus } =
		useGameStore();

	const currentAnimation = getNPCAnimation(npcId);
	const npcStatus = getNPCDialogStatus(npcId);

	const handlePointerOver = (characterId) => {
		setHoveredCharacter(characterId);
		document.body.style.cursor = "pointer";
	};

	const handlePointerOut = () => {
		setHoveredCharacter(null);
		document.body.style.cursor = "grab";
	};

	const handleClick = (e) => {
		e.stopPropagation();
		if (npcStatus.canInteract) {
			interactWithNPC("chained");
		}
	};

	// const getOutlineColor = () => {
	// 	let outlineColor = "#ffff00";
	// 	if (npcStatus.hasBeenPlayed) {
	// 		outlineColor = "#666666";
	// 	} else if (hoveredCharacter === npcId) {
	// 		outlineColor = "#00ff00";
	// 	}
	// 	console.log(`Outline color: ${outlineColor}`);

	// 	return outlineColor;
	// };

	useEffect(() => {
		const actionName = ACTION_MAP[currentAnimation];
		const targetAction = actions[actionName];

		if (targetAction) {
			Object.values(actions).forEach((action) => {
				if (action !== targetAction && action.isRunning()) {
					action.fadeOut(0.1);
				}
			});
			targetAction.reset().fadeIn(0.1).play();
		} else {
			console.warn("animation not found: ", actionName);
		}
	}, [currentAnimation, actions, npcId]);

	useEffect(() => {
		if (actions && Object.keys(actions).length > 0) {
			const idleAction = actions[ACTION_MAP.idle];
			if (idleAction) {
				idleAction.play();
			}
		} else {
			console.warn("Idle animation not found");
		}
	}, [actions]);

	return (
		<group ref={group} {...props} dispose={null}>
			<group name='Root_Scene'>
				<group name='RootNode'>
					<group
						ref={armatureRef}
						name='CharacterArmature'
						position={[6, 0, -1]}
						rotation={[-Math.PI / 2, 0, 0.1]}
						scale={50}>
						<primitive object={nodes.Root} />
					</group>
					<group
						name='Cactoro'
						rotation={[-Math.PI / 2, 0, 0]}
						scale={54}
						onPointerOver={() => handlePointerOver(npcId)}
						onPointerOut={handlePointerOut}
						onClick={handleClick}>
						<skinnedMesh
							name='Cactoro_1'
							geometry={nodes.Cactoro_1.geometry}
							material={materials.Cactoro_Main}
							skeleton={nodes.Cactoro_1.skeleton}
						/>

						<skinnedMesh
							name='Cactoro_2'
							geometry={nodes.Cactoro_2.geometry}
							material={materials.Cactoro_Secondary}
							skeleton={nodes.Cactoro_2.skeleton}
						/>

						<skinnedMesh
							name='Cactoro_3'
							geometry={nodes.Cactoro_3.geometry}
							material={materials["Cactoro_Main.001"]}
							skeleton={nodes.Cactoro_3.skeleton}
						/>
						<skinnedMesh
							name='Cactoro_4'
							geometry={nodes.Cactoro_4.geometry}
							material={materials.Cactoro_Red}
							skeleton={nodes.Cactoro_4.skeleton}
						/>
						<skinnedMesh
							name='Cactoro_5'
							geometry={nodes.Cactoro_5.geometry}
							material={materials.Eye_White}
							skeleton={nodes.Cactoro_5.skeleton}
						/>
						<skinnedMesh
							name='Cactoro_6'
							geometry={nodes.Cactoro_6.geometry}
							material={materials.Eye_Black}
							skeleton={nodes.Cactoro_6.skeleton}
						/>
					</group>
				</group>
			</group>
		</group>
	);
}

useGLTF.preload("models/characters/Cactoro.glb");

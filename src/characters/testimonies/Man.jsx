/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, { useRef, useEffect, useState } from "react";
import { useGLTF, useAnimations, Outlines } from "@react-three/drei";
import { useGameStore } from "../../store/gameStore";

const ACTION_MAP = {
	clapping: "HumanArmature|Man_Clapping",
	death: "HumanArmature|Man_Death",
	idle: "HumanArmature|Man_Idle",
	jump: "HumanArmature|Man_Jump",
	punch: "HumanArmature|Man_Punch",
	run: "HumanArmature|Man_Run",
	runJump: "HumanArmature|Man_RunningJump",
	sitting: "HumanArmature|Man_Sitting",
	standing: "HumanArmature|Man_Standing",
	swordSlash: "HumanArmature|Man_SwordSlash",
	walk: "HumanArmature|Man_Walk",
};

export default function Man(props) {
	const group = useRef();
	const [hoveredCharacter, setHoveredCharacter] = useState(null);
	const npcId = "Man";

	const { nodes, materials, animations } = useGLTF(
		"models/characters/testimonies/Man.glb"
	);
	const { actions } = useAnimations(animations, group);

	const { interactWithNPC, getNPCAnimation, getNPCDialogStatus } =
		useGameStore();

	const currentAnimation = getNPCAnimation(npcId);
	const npcStatus = getNPCDialogStatus(npcId);

	const handlePointerOver = () => {
		setHoveredCharacter(npcId);
		console.log(`Hovered over: ${hoveredCharacter}`);
		document.body.style.cursor = "pointer";
	};

	const handlePointerOut = () => {
		setHoveredCharacter(null);
		document.body.style.cursor = "default";
	};

	const handleClick = (e) => {
		e.stopPropagation();
		if (npcStatus.canInteract) {
			interactWithNPC(npcId);
		} else {
			console.log("Can't interact with this NPC");
		}
	};

	useEffect(() => {
		if (!actions || Object.keys(actions).length === 0) return;
		const actionName = ACTION_MAP[currentAnimation];
		const targetAction = actions[actionName];

		if (targetAction) {
			Object.values(actions).forEach((action) => {
				if (action !== targetAction && action.isRunning()) {
					action.fadeOut(0.1);
				}
			});
			targetAction.reset().fadeIn(0.1).play();
		} else {
			console.warn("Animation not found: ", actionName);
		}
	}, [actions, npcId, currentAnimation]);

	useEffect(() => {
		if (actions && Object.keys(actions).length > 0) {
			const idleAction = actions[ACTION_MAP.idle];
			if (idleAction) {
				idleAction.play();
			} else {
				console.warn("Idle animation not found");
			}
		}
	}, [actions]);

	return (
		<group ref={group} {...props} dispose={null}>
			<group name='Root_Scene'>
				<group name='RootNode'>
					<group
						name='HumanArmature'
						rotation={[-Math.PI / 2, 0, 0]}
						scale={30}>
						<primitive object={nodes.Bone} />
					</group>
					<group
						name='BaseHuman'
						rotation={[-Math.PI / 2, 0, 0]}
						scale={100}
						onPointerOver={handlePointerOver}
						onPointerOut={handlePointerOut}
						onClick={handleClick}>
						<skinnedMesh
							name='BaseHuman_1'
							geometry={nodes.BaseHuman_1.geometry}
							material={materials.Shirt2}
							skeleton={nodes.BaseHuman_1.skeleton}
						/>
						<skinnedMesh
							name='BaseHuman_2'
							geometry={nodes.BaseHuman_2.geometry}
							material={materials.Shirt}
							skeleton={nodes.BaseHuman_2.skeleton}
						/>
						<skinnedMesh
							name='BaseHuman_3'
							geometry={nodes.BaseHuman_3.geometry}
							material={materials.Skin}
							skeleton={nodes.BaseHuman_3.skeleton}
						/>
						<skinnedMesh
							name='BaseHuman_4'
							geometry={nodes.BaseHuman_4.geometry}
							material={materials.Pants}
							skeleton={nodes.BaseHuman_4.skeleton}
						/>
						<skinnedMesh
							name='BaseHuman_5'
							geometry={nodes.BaseHuman_5.geometry}
							material={materials.Shoes}
							skeleton={nodes.BaseHuman_5.skeleton}
						/>
						<skinnedMesh
							name='BaseHuman_6'
							geometry={nodes.BaseHuman_6.geometry}
							material={materials.Socks}
							skeleton={nodes.BaseHuman_6.skeleton}
						/>
						<skinnedMesh
							name='BaseHuman_7'
							geometry={nodes.BaseHuman_7.geometry}
							material={materials.Hair2}
							skeleton={nodes.BaseHuman_7.skeleton}
						/>
						<skinnedMesh
							name='BaseHuman_8'
							geometry={nodes.BaseHuman_8.geometry}
							material={materials.Hair}
							skeleton={nodes.BaseHuman_8.skeleton}
						/>
						<skinnedMesh
							name='BaseHuman_9'
							geometry={nodes.BaseHuman_9.geometry}
							material={materials.Eyes}
							skeleton={nodes.BaseHuman_9.skeleton}
						/>
					</group>
				</group>
			</group>
		</group>
	);
}

useGLTF.preload("models/characters/testimonies/Man.glb");

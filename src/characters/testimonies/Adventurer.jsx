/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, { useEffect, useRef, useState } from "react";
import { useGLTF, useAnimations, Outlines } from "@react-three/drei";
import { useGameStore } from "../../store/gameStore";

const ACTION_MAP = {
	death: "CharacterArmature|Death",
	gunShoot: "CharacterArmature|Gun_Shoot",
	hitReceive: "CharacterArmature|HitRecieve",
	hitReceive2: "CharacterArmature|HitRecieve_2",
	idle: "CharacterArmature|Idle",
	idleGun: "CharacterArmature|Idle_Gun",
	gunPointing: "CharacterArmature|Idle_Gun_Pointing",
	idleGunShoot: "CharacterArmature|Idle_Gun_Shoot",
	idleNeutral: "CharacterArmature|Idle_Neutral",
	idleSword: "CharacterArmature|Idle_Sword",
	interact: "CharacterArmature|Interact",
	kickLeft: "CharacterArmature|Kick_Left",
	kickRight: "CharacterArmature|Kick_Right",
	punchLeft: "CharacterArmature|Punch_Left",
	punchRight: "fCharacterArmature|Punch_Right",
	roll: "CharacterArmature|Roll",
	run: "CharacterArmature|Run",
	runBack: "CharacterArmature|Run_Back",
	runLeft: "CharacterArmature|Run_Left",
	runRight: "CharacterArmature|Run_Right",
	runShoot: "CharacterArmature|Run_Shoot",
	swordSlash: "CharacterArmature|Sword_Slash",
	walk: "CharacterArmature|Walk",
	wave: "CharacterArmature|Wave",
};

export default function Adventurer(props) {
	const group = useRef();
	const [hoveredCharacter, setHoveredCharacter] = useState(null);
	const npcId = "Adventurer";

	const { nodes, materials, animations } = useGLTF(
		"models/characters/testimonies/Adventurer.glb"
	);

	const { actions } = useAnimations(animations, group);
	console.log("Adventurer Actions: ", actions);

	const { interactWithNPC, getNPCAnimation, getNPCDialogStatus } =
		useGameStore();

	const currentAnimation = getNPCAnimation(npcId);
	const npcStatus = getNPCDialogStatus(npcId);

	console.log("Adventurer Actions: ", actions);
	console.log("NPC Status: ", npcStatus);
	console.log("Current Animation: ", currentAnimation);

	const handlePointerOver = () => {
		setHoveredCharacter(npcId);
		console.log(`Hovered over: ${hoveredCharacter}`);
		document.body.style.cursor = "pointer";
	};

	const handlePointerOut = () => {
		console.log("Hovering away from character");
		setHoveredCharacter(null);
		document.body.style.cursor = "default";
	};

	const handleClick = (e) => {
		e.stopPropagation();
		console.log("Clicked on character: ", npcId);
		if (npcStatus.canInteract) {
			console.log("Can interact with npc, starting interaction: ");
			interactWithNPC(npcId);
		} else {
			console.log("Can't interact with this NPC");
		}
	};

	const getOutlineColor = () => {
		if (npcStatus.hasBeenPlayed) {
			return "#666666";
		} else if (hoveredCharacter === npcId) {
			return "#00ff00";
		} else if (npcStatus.hasDialog) {
			return "#fff00";
		}
		return "#ffffff";
	};

	useEffect(() => {
		if (!actions || Object.keys(actions).length === 0) return;
		const actionName = ACTION_MAP[currentAnimation];
		const targetAction = actions[actionName];

		if (targetAction) {
			console.log(`Switching to animation: ${actionName}`);

			Object.values(actions).forEach((action) => {
				if (action !== targetAction && action.isRunning()) {
					action.fadeOut(0.1);
				}
			});
			targetAction.reset().fadeIn(0.1).play();
		} else {
			console.warn("Animation not found: ", actionName);
		}
	}, [actions, npcId, currentAnimation]);

	useEffect(() => {
		if (actions && Object.keys(actions).length > 0) {
			const idleAction = actions[ACTION_MAP.idle];
			if (idleAction) {
				idleAction.play();
			} else {
				console.warn("Idle animation not found");
			}
		}
	}, [actions]);

	return (
		<group ref={group} {...props} dispose={null}>
			<group name='Root_Scene'>
				<group name='RootNode'>
					<group
						name='CharacterArmature'
						rotation={[-Math.PI / 2, 0, 0]}
						scale={80}>
						<primitive object={nodes.Root} />
					</group>
					<group
						name='Adventurer_Feet'
						rotation={[-Math.PI / 2, 0, 0]}
						scale={100}
						onPointerOver={handlePointerOver}
						onPointerOut={handlePointerOut}
						onClick={handleClick}>
						<skinnedMesh
							name='Adventurer_Feet_1'
							geometry={nodes.Adventurer_Feet_1.geometry}
							material={materials.Black}
							skeleton={nodes.Adventurer_Feet_1.skeleton}
						/>
						<skinnedMesh
							name='Adventurer_Feet_2'
							geometry={nodes.Adventurer_Feet_2.geometry}
							material={materials.Grey}
							skeleton={nodes.Adventurer_Feet_2.skeleton}
						/>
					</group>
					<group
						name='Adventurer_Legs'
						rotation={[-Math.PI / 2, 0, 0]}
						scale={100}
						onPointerOver={handlePointerOver}
						onPointerOut={handlePointerOut}
						onClick={handleClick}>
						<skinnedMesh
							name='Adventurer_Legs_1'
							geometry={nodes.Adventurer_Legs_1.geometry}
							material={materials.Brown2}
							skeleton={nodes.Adventurer_Legs_1.skeleton}
						/>
						<skinnedMesh
							name='Adventurer_Legs_2'
							geometry={nodes.Adventurer_Legs_2.geometry}
							material={materials.Brown}
							skeleton={nodes.Adventurer_Legs_2.skeleton}
						/>
					</group>
					<group
						name='Adventurer_Body'
						rotation={[-Math.PI / 2, 0, 0]}
						scale={100}
						onPointerOver={handlePointerOver}
						onPointerOut={handlePointerOut}
						onClick={handleClick}>
						<skinnedMesh
							name='Adventurer_Body_1'
							geometry={nodes.Adventurer_Body_1.geometry}
							material={materials.Green}
							skeleton={nodes.Adventurer_Body_1.skeleton}
						/>
						<skinnedMesh
							name='Adventurer_Body_2'
							geometry={nodes.Adventurer_Body_2.geometry}
							material={materials.LightGreen}
							skeleton={nodes.Adventurer_Body_2.skeleton}
						/>
						<skinnedMesh
							name='Adventurer_Body_3'
							geometry={nodes.Adventurer_Body_3.geometry}
							material={materials.Skin}
							skeleton={nodes.Adventurer_Body_3.skeleton}>
							{hoveredCharacter === npcId && npcStatus.hasDialog && (
								<Outlines thickness={0.05} color={getOutlineColor()} />
							)}
						</skinnedMesh>
					</group>
					<group
						name='Adventurer_Head'
						rotation={[-Math.PI / 2, 0, 0]}
						scale={100}
						onPointerOver={handlePointerOver}
						onPointerOut={handlePointerOut}
						onClick={handleClick}>
						<skinnedMesh
							name='Adventurer_Head_1'
							geometry={nodes.Adventurer_Head_1.geometry}
							material={materials.Skin}
							skeleton={nodes.Adventurer_Head_1.skeleton}
						/>
						<skinnedMesh
							name='Adventurer_Head_2'
							geometry={nodes.Adventurer_Head_2.geometry}
							material={materials.Eyebrows}
							skeleton={nodes.Adventurer_Head_2.skeleton}
						/>
						<skinnedMesh
							name='Adventurer_Head_3'
							geometry={nodes.Adventurer_Head_3.geometry}
							material={materials.Eye}
							skeleton={nodes.Adventurer_Head_3.skeleton}
						/>
						<skinnedMesh
							name='Adventurer_Head_4'
							geometry={nodes.Adventurer_Head_4.geometry}
							material={materials.Hair}
							skeleton={nodes.Adventurer_Head_4.skeleton}
						/>
					</group>
					<group
						name='Backpack'
						position={[0, 1.373, -0.117]}
						rotation={[-Math.PI / 2, 0, Math.PI]}
						scale={26.077}>
						<skinnedMesh
							name='Backpack_1'
							geometry={nodes.Backpack_1.geometry}
							material={materials.Brown}
							skeleton={nodes.Backpack_1.skeleton}
						/>
						<skinnedMesh
							name='Backpack_2'
							geometry={nodes.Backpack_2.geometry}
							material={materials.Green}
							skeleton={nodes.Backpack_2.skeleton}
						/>
						<skinnedMesh
							name='Backpack_3'
							geometry={nodes.Backpack_3.geometry}
							material={materials.LightGreen}
							skeleton={nodes.Backpack_3.skeleton}
						/>
						<skinnedMesh
							name='Backpack_4'
							geometry={nodes.Backpack_4.geometry}
							material={materials.Gold}
							skeleton={nodes.Backpack_4.skeleton}
						/>
					</group>
				</group>
			</group>
		</group>
	);
}

useGLTF.preload("models/characters/testimonies/Adventurer.glb");

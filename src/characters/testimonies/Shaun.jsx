/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, { useRef, useEffect, useState } from "react";
import { useGLTF, useAnimations } from "@react-three/drei";
import { useGameStore } from "../../store/gameStore";
// import { useControls } from "leva";
// import { useFrame } from "@react-three/fiber";

const ACTION_MAP = {
	death: "CharacterArmature|Death",
	duck: "CharacterArmature|Duck",
	hitReact: "CharacterArmature|HitReact",
	idle: "CharacterArmature|Idle",
	idleGun: "CharacterArmature|Idle_Gun",
	jump: "CharacterArmature|Jump",
	jumpIdle: "CharacterArmature|Jump_Idle",
	jumpLand: "CharacterArmature|Jump_Land",
	no: "CharacterArmature|No",
	punch: "CharacterArmature|Punch",
	run: "CharacterArmature|Run",
	runGun: "CharacterArmature|Run_Gun",
	runSlash: "CharacterArmature|Run_Slash",
	runStab: "CharacterArmature|Run_Stab",
	stab: "CharacterArmature|Stab",
	walk: "CharacterArmature|Walk",
	walkGun: "CharacterArmature|Walk_Gun",
	wave: "CharacterArmature|Wave",
	yes: "CharacterArmature|Yes",
};

export default function Shaun(props) {
	const group = useRef();
	const [hoveredCharacter, setHoveredCharacter] = useState(null);
	const npcId = "Shaun";

	const { nodes, materials, animations } = useGLTF(
		"models/characters/testimonies/Shaun.glb"
	);
	const { actions } = useAnimations(animations, group);
	console.log("Actions: ", actions);

	const { interactWithNPC, getNPCAnimation, getNPCDialogStatus } =
		useGameStore();

	const currentAnimation = getNPCAnimation(npcId);
	const npcStatus = getNPCDialogStatus(npcId);

	console.log("Adventurer Actions: ", actions);
	console.log("NPC Status: ", npcStatus);
	console.log("Current Animation: ", currentAnimation);

	const handlePointerOver = () => {
		setHoveredCharacter(npcId);
		console.log(`Hovered over: ${hoveredCharacter}`);
		document.body.style.cursor = "pointer";
	};

	const handlePointerOut = () => {
		console.log("Hovering away from character");
		setHoveredCharacter(null);
		document.body.style.cursor = "default";
	};

	const handleClick = (e) => {
		e.stopPropagation();
		console.log("Clicked on character: ", npcId);
		if (npcStatus.canInteract) {
			console.log("Can interact with npc, starting interaction: ");
			interactWithNPC(npcId);
		} else {
			console.log("Can't interact with this NPC");
		}
	};

	useEffect(() => {
		if (!actions || Object.keys(actions).length === 0) return;
		const actionName = ACTION_MAP[currentAnimation];
		const targetAction = actions[actionName];

		if (targetAction) {
			console.log(`Switching to animation: ${actionName}`);

			Object.values(actions).forEach((action) => {
				if (action !== targetAction && action.isRunning()) {
					action.fadeOut(0.1);
				}
			});
			targetAction.reset().fadeIn(0.1).play();
		} else {
			console.warn("Animation not found: ", actionName);
		}
	}, [actions, npcId, currentAnimation]);

	useEffect(() => {
		if (actions && Object.keys(actions).length > 0) {
			const idleAction = actions[ACTION_MAP.idle];
			if (idleAction) {
				idleAction.play();
			} else {
				console.warn("Idle animation not found");
			}
		}
	}, [actions]);

	// const { currentAnimation, animationSpeed } = useControls("Shaun Animation", {
	// 	currentAnimation: {
	// 		value: "idle",
	// 		options: Object.keys(ACTION_MAP),
	// 	},
	// 	animationSpeed: { value: 1, min: 0.1, max: 3, step: 0.1 },
	// });

	// const [_, getKeys] = useKeyboardControls();

	// useEffect(() => {
	// 	const actionName = ACTION_MAP[currentAnimation];
	// 	if (actions[actionName]) {
	// 		Object.values(actions).forEach((action) => action.stop());
	// 		actions[actionName].reset().fadeIn(0.2).play();
	// 		actions[actionName].timeScale = animationSpeed;
	// 	}
	// }, [currentAnimation, animationSpeed, actions]);

	// useFrame((state, delta) => {
	// 	const { forward, backward, leftward, rightward } = getKeys();
	// 	const movementSpeed = 5;

	// 	const isMoving = forward || backward || leftward || rightward;

	// 	if (group.current) {
	// 		if (forward) {
	// 			group.current.position.z -= movementSpeed * delta;
	// 		}
	// 		if (backward) {
	// 			group.current.position.z += movementSpeed * delta;
	// 		}
	// 		if (leftward) {
	// 			group.current.position.x -= movementSpeed * delta;
	// 		}
	// 		if (rightward) {
	// 			group.current.position.x += movementSpeed * delta;
	// 		}
	// 		if (isMoving) {
	// 			if (forward && leftward) {
	// 				group.current.rotation.y = Math.PI / 4;
	// 			} else if (forward && rightward) {
	// 				group.current.rotation.y = -Math.PI / 4;
	// 			} else if (backward && leftward) {
	// 				group.current.rotation.y = (3 * Math.PI) / 4;
	// 			} else if (backward && rightward) {
	// 				group.current.rotation.y = (-3 * Math.PI) / 4;
	// 			} else if (forward) {
	// 				group.current.rotation.y = 0;
	// 			} else if (backward) {
	// 				group.current.rotation.y = Math.PI;
	// 			} else if (leftward) {
	// 				group.current.rotation.y = Math.PI / 2;
	// 			} else if (rightward) {
	// 				group.current.rotation.y = -Math.PI / 2;
	// 			}
	// 		}
	// 	}
	// 	const shouldAnimate =
	// 		currentAnimation === "idle" || currentAnimation === "run";

	// 	if (shouldAnimate) {
	// 		const targetAction = isMoving ? "run" : "idle";
	// 		const actionName = ACTION_MAP[targetAction];

	// 		if (actions[actionName] && !actions[actionName].isRunning()) {
	// 			Object.values(actions).forEach((action) => action.stop());

	// 			actions[actionName].reset().fadeIn(0.2).play();
	// 			actions[actionName].timeScale = animationSpeed;
	// 		}
	// 	}
	// });

	return (
		<group ref={group} rotation={[0, Math.PI, 0]} {...props} dispose={null}>
			<group name='Root_Scene'>
				<group name='RootNode'>
					<group
						name='CharacterArmature'
						rotation={[-Math.PI / 2, 0, 0]}
						scale={100}>
						<primitive object={nodes.Root} />
					</group>
					<skinnedMesh
						name='Shaun'
						geometry={nodes.Shaun.geometry}
						material={materials.Atlas}
						skeleton={nodes.Shaun.skeleton}
						rotation={[-Math.PI / 2, 0, 0]}
						scale={100}
						onPointerOver={handlePointerOver}
						onPointerOut={handlePointerOut}
						onClick={handleClick}
					/>
				</group>
			</group>
		</group>
	);
}

useGLTF.preload("models/characters/testimonies/Shaun.glb");

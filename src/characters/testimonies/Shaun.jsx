/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, { useRef, useEffect, useState } from "react";
import { useGLTF, useAnimations } from "@react-three/drei";
import { useGameStore } from "../../store/gameStore";
// import { useControls } from "leva";
// import { useFrame } from "@react-three/fiber";

const ACTION_MAP = {
	death: "CharacterArmature|Death",
	duck: "CharacterArmature|Duck",
	hitReact: "CharacterArmature|HitReact",
	idle: "CharacterArmature|Idle",
	idleGun: "CharacterArmature|Idle_Gun",
	jump: "CharacterArmature|Jump",
	jumpIdle: "CharacterArmature|Jump_Idle",
	jumpLand: "CharacterArmature|Jump_Land",
	no: "CharacterArmature|No",
	punch: "CharacterArmature|Punch",
	run: "CharacterArmature|Run",
	runGun: "CharacterArmature|Run_Gun",
	runSlash: "CharacterArmature|Run_Slash",
	runStab: "CharacterArmature|Run_Stab",
	stab: "CharacterArmature|Stab",
	walk: "CharacterArmature|Walk",
	walkGun: "CharacterArmature|Walk_Gun",
	wave: "CharacterArmature|Wave",
	yes: "CharacterArmature|Yes",
};

export default function Shaun(props) {
	const group = useRef();
	const [hoveredCharacter, setHoveredCharacter] = useState(null);
	const npcId = "Shaun";

	const { nodes, materials, animations } = useGLTF(
		"models/characters/testimonies/Shaun.glb"
	);
	const { actions } = useAnimations(animations, group);

	const { interactWithNPC, getNPCAnimation, getNPCDialogStatus } =
		useGameStore();

	const currentAnimation = getNPCAnimation(npcId);
	const npcStatus = getNPCDialogStatus(npcId);

	const handlePointerOver = () => {
		setHoveredCharacter(npcId);

		document.body.style.cursor = "pointer";
	};

	const handlePointerOut = () => {
		setHoveredCharacter(null);
		document.body.style.cursor = "default";
	};

	const handleClick = (e) => {
		e.stopPropagation();
		if (npcStatus.canInteract) {
			interactWithNPC(npcId);
		} else {
	
		}
	};

	useEffect(() => {
		if (!actions || Object.keys(actions).length === 0) return;
		const actionName = ACTION_MAP[currentAnimation];
		const targetAction = actions[actionName];

		if (targetAction) {
			Object.values(actions).forEach((action) => {
				if (action !== targetAction && action.isRunning()) {
					action.fadeOut(0.1);
				}
			});
			targetAction.reset().fadeIn(0.1).play();
		} else {
	
		}
	}, [actions, npcId, currentAnimation]);

	useEffect(() => {
		if (actions && Object.keys(actions).length > 0) {
			const idleAction = actions[ACTION_MAP.idle];
			if (idleAction) {
				idleAction.play();
			} else {
		
			}
		}
	}, [actions]);

	return (
		<group ref={group} rotation={[0, Math.PI, 0]} {...props} dispose={null}>
			<group name='Root_Scene'>
				<group name='RootNode'>
					<group
						name='CharacterArmature'
						rotation={[-Math.PI / 2, 0, 0]}
						scale={100}>
						<primitive object={nodes.Root} />
					</group>
					<skinnedMesh
						name='Shaun'
						geometry={nodes.Shaun.geometry}
						material={materials.Atlas}
						skeleton={nodes.Shaun.skeleton}
						rotation={[-Math.PI / 2, 0, 0]}
						scale={100}
						onPointerOver={handlePointerOver}
						onPointerOut={handlePointerOut}
						onClick={handleClick}
					/>
				</group>
			</group>
		</group>
	);
}

useGLTF.preload("models/characters/testimonies/Shaun.glb");

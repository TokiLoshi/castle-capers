/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, { useRef, useEffect, useState } from "react";
import { useGLTF, useAnimations } from "@react-three/drei";
import { useGameStore } from "../../store/gameStore";

const ACTION_MAP = {
	death: "CharacterArmature|Death",
	shoot: "CharacterArmature|Gun_Shoot",
	hitReceive: "CharacterArmature|HitRecieve",
	hitReceive2: "CharacterArmature|HitRecieve_2",
	idle: "CharacterArmature|Idle",
	idleGun: "CharacterArmature|Idle_Gun",
	idleGunPointing: "CharacterArmature|Idle_Gun_Pointing",
	idleGunShoot: "CharacterArmature|Idle_Gun_Shoot",
	idleNeutral: "CharacterArmature|Idle_Neutral",
	idleSword: "CharacterArmature|Idle_Sword",
	interact: "CharacterArmature|Interact",
	kickLeft: "CharacterArmature|Kick_Left",
	kickRight: "CharacterArmature|Kick_Right",
	punchLeft: "CharacterArmature|Punch_Left",
	punchRight: "CharacterArmature|Punch_Right",
	roll: "CharacterArmature|Roll",
	run: "CharacterArmature|Run",
	runBack: "CharacterArmature|Run_Back",
	runLeft: "CharacterArmature|Run_Left",
	runRight: "CharacterArmature|Run_Right",
	runShoot: "CharacterArmature|Run_Shoot",
	swordSlash: "CharacterArmature|Sword_Slash",
	walk: "CharacterArmature|Walk",
	wave: "CharacterArmature|Wave",
};

export default function Witch(props) {
	const group = useRef();
	const [hoveredCharacter, setHoveredCharacter] = useState(null);

	const npcId = "Witch";
	const { nodes, materials, animations } = useGLTF(
		"models/characters/testimonies/Witch.glb"
	);
	const { actions } = useAnimations(animations, group);
	console.log("Witch Actions: ", actions);

	const { interactWithNPC, getNPCAnimation, getNPCDialogStatus } =
		useGameStore();

	const currentAnimation = getNPCAnimation(npcId);
	const npcStatus = getNPCDialogStatus(npcId);

	console.log("Witch Actions: ", actions);
	console.log("NPC Status: ", npcStatus);
	console.log("Current Animation: ", currentAnimation);

	const handlePointerOver = () => {
		setHoveredCharacter(npcId);
		document.body.style.cursor = "pointer";
		console.log(`Hovered over: ${hoveredCharacter}`);
	};

	const handlePointerOut = () => {
		console.log("Hovering away from character");
		setHoveredCharacter(null);
		document.body.style.cursor = "default";
	};

	const handleClick = (e) => {
		e.stopPropagation();
		console.log("Clicked on character: ", npcId);
		if (npcStatus.canInteract) {
			console.log("Can interact with npc, starting interaction: ");
			interactWithNPC(npcId);
		} else {
			console.log("Can't interact with this NPC");
		}
	};

	// const getOutlineColor = () => {
	// 	if (npcStatus.hasBeenPlayed) {
	// 		return "#666666";
	// 	} else if (hoveredCharacter === npcId) {
	// 		return "#00ff00";
	// 	} else if (npcStatus.hasDialog) {
	// 		return "#fff00";
	// 	}
	// 	return "#ffffff";
	// };

	useEffect(() => {
		if (!actions || Object.keys(actions).length === 0) return;
		const actionName = ACTION_MAP[currentAnimation];
		const targetAction = actions[actionName];

		if (targetAction) {
			console.log(`Switching to animation: ${actionName}`);

			Object.values(actions).forEach((action) => {
				if (action !== targetAction && action.isRunning()) {
					action.fadeOut(0.1);
				}
			});
			targetAction.reset().fadeIn(0.1).play();
		} else {
			console.warn("Animation not found: ", actionName);
		}
	}, [actions, npcId, currentAnimation]);

	useEffect(() => {
		if (actions && Object.keys(actions).length > 0) {
			const idleAction = actions[ACTION_MAP.idle];
			if (idleAction) {
				idleAction.play();
			} else {
				console.warn("Idle animation not found");
			}
		}
	}, [actions]);
	return (
		<group ref={group} {...props} dispose={null}>
			<group name='Root_Scene'>
				<group name='RootNode'>
					<group
						name='CharacterArmature'
						rotation={[-Math.PI / 2, 0, 0]}
						scale={75}>
						<primitive object={nodes.Root} />
					</group>
					<group
						name='Witch_Body'
						rotation={[-Math.PI / 2, 0, 0]}
						scale={100}
						onPointerOver={handlePointerOver}
						onPointerOut={handlePointerOut}
						onClick={handleClick}>
						<skinnedMesh
							name='Witch_Body_1'
							geometry={nodes.Witch_Body_1.geometry}
							material={materials.Purple}
							skeleton={nodes.Witch_Body_1.skeleton}
						/>
						<skinnedMesh
							name='Witch_Body_2'
							geometry={nodes.Witch_Body_2.geometry}
							material={materials.Skin}
							skeleton={nodes.Witch_Body_2.skeleton}
						/>
						<skinnedMesh
							name='Witch_Body_3'
							geometry={nodes.Witch_Body_3.geometry}
							material={materials.Gold}
							skeleton={nodes.Witch_Body_3.skeleton}
						/>
						<skinnedMesh
							name='Witch_Body_4'
							geometry={nodes.Witch_Body_4.geometry}
							material={materials.Brown2}
							skeleton={nodes.Witch_Body_4.skeleton}
						/>
					</group>
					<skinnedMesh
						name='Witch_Feet'
						geometry={nodes.Witch_Feet.geometry}
						material={materials.Brown2}
						skeleton={nodes.Witch_Feet.skeleton}
						rotation={[-Math.PI / 2, 0, 0]}
						scale={100}
					/>
					<group name='Witch_Head' rotation={[-Math.PI / 2, 0, 0]} scale={100}>
						<skinnedMesh
							name='Witch_Head_1'
							geometry={nodes.Witch_Head_1.geometry}
							material={materials.Purple}
							skeleton={nodes.Witch_Head_1.skeleton}
						/>
						<skinnedMesh
							name='Witch_Head_2'
							geometry={nodes.Witch_Head_2.geometry}
							material={materials.Skin}
							skeleton={nodes.Witch_Head_2.skeleton}
						/>
						<skinnedMesh
							name='Witch_Head_3'
							geometry={nodes.Witch_Head_3.geometry}
							material={materials.Gold}
							skeleton={nodes.Witch_Head_3.skeleton}
						/>
						<skinnedMesh
							name='Witch_Head_4'
							geometry={nodes.Witch_Head_4.geometry}
							material={materials.Hair_Black}
							skeleton={nodes.Witch_Head_4.skeleton}
						/>
						<skinnedMesh
							name='Witch_Head_5'
							geometry={nodes.Witch_Head_5.geometry}
							material={materials.Brown}
							skeleton={nodes.Witch_Head_5.skeleton}
						/>
					</group>
					<group name='Witch_Legs' rotation={[-Math.PI / 2, 0, 0]} scale={100}>
						<skinnedMesh
							name='Witch_Legs_1'
							geometry={nodes.Witch_Legs_1.geometry}
							material={materials.Purple}
							skeleton={nodes.Witch_Legs_1.skeleton}
						/>
						<skinnedMesh
							name='Witch_Legs_2'
							geometry={nodes.Witch_Legs_2.geometry}
							material={materials.Gold}
							skeleton={nodes.Witch_Legs_2.skeleton}
						/>
						<skinnedMesh
							name='Witch_Legs_3'
							geometry={nodes.Witch_Legs_3.geometry}
							material={materials.Brown}
							skeleton={nodes.Witch_Legs_3.skeleton}
						/>
					</group>
				</group>
			</group>
		</group>
	);
}

useGLTF.preload("models/characters/testimonies/Witch.glb");

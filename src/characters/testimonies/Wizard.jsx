/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, { useRef, useEffect, useState } from "react";
import { useGLTF, useAnimations } from "@react-three/drei";
import { useGameStore } from "../../store/gameStore";

const ACTION_MAP = {
	death: "CharacterArmature|Death",
	idle: "CharacterArmature|Idle",
	idleAttacking: "CharacterArmature|Idle_Attacking",
	idleWeapon: "CharacterArmature|Idle_Weapon",
	pickup: "CharacterArmature|PickUp",
	punch: "CharacterArmature|Punch",
	receiveHit: "CharacterArmature|RecieveHit",
	receiveHit2: "CharacterArmature|RecieveHit_2",
	roll: "CharacterArmature|Roll",
	run: "CharacterArmature|Run",
	runWeapon: "CharacterArmature|Run_Weapon",
	spell1: "CharacterArmature|Spell1",
	spell2: "CharacterArmature|Spell2",
	staffAttack: "CharacterArmature|Staff_Attack",
	walk: "CharacterArmature|Walk",
};

export default function Wizard(props) {
	const group = useRef();
	const [hoveredCharacter, setHoveredCharacter] = useState(null);
	const npcId = "Wizard";

	const { nodes, materials, animations } = useGLTF(
		"models/characters/testimonies/Wizard.glb"
	);
	const { actions } = useAnimations(animations, group);

	const { interactWithNPC, getNPCAnimation, getNPCDialogStatus } =
		useGameStore();

	const currentAnimation = getNPCAnimation(npcId);
	const npcStatus = getNPCDialogStatus(npcId);

	const handlePointerOver = () => {
		setHoveredCharacter(npcId);
		console.log(`Hovered over: ${hoveredCharacter}`);
		document.body.style.cursor = "pointer";
	};

	const handlePointerOut = () => {
		setHoveredCharacter(null);
		document.body.style.cursor = "default";
	};

	const handleClick = (e) => {
		e.stopPropagation();
		if (npcStatus.canInteract) {
			interactWithNPC(npcId);
		} else {
			console.log("Can't interact with this NPC");
		}
	};

	useEffect(() => {
		if (!actions || Object.keys(actions).length === 0) return;
		const actionName = ACTION_MAP[currentAnimation];
		const targetAction = actions[actionName];

		if (targetAction) {
			Object.values(actions).forEach((action) => {
				if (action !== targetAction && action.isRunning()) {
					action.fadeOut(0.1);
				}
			});
			targetAction.reset().fadeIn(0.1).play();
		} else {
			console.warn("Animation not found: ", actionName);
		}
	}, [actions, npcId, currentAnimation]);

	useEffect(() => {
		if (actions && Object.keys(actions).length > 0) {
			const idleAction = actions[ACTION_MAP.idle];
			if (idleAction) {
				idleAction.play();
			} else {
				console.warn("Idle animation not found");
			}
		}
	}, [actions]);
	return (
		<group ref={group} {...props} dispose={null}>
			<group name='Root_Scene'>
				<group name='RootNode'>
					<group
						name='CharacterArmature'
						rotation={[-Math.PI / 2, 0, 0]}
						scale={50}>
						<primitive object={nodes.Root} />
					</group>
					<skinnedMesh
						name='Wizard001'
						geometry={nodes.Wizard001.geometry}
						material={materials.Wizard_Texture}
						skeleton={nodes.Wizard001.skeleton}
						rotation={[-Math.PI / 2, 0, 0]}
						scale={100}
						onPointerOver={handlePointerOver}
						onPointerOut={handlePointerOut}
						onClick={handleClick}
					/>
					<group name='Wizard' rotation={[-Math.PI / 2, 0, 0]} scale={100} />
				</group>
			</group>
		</group>
	);
}

useGLTF.preload("models/characters/testimonies/Wizard.glb");

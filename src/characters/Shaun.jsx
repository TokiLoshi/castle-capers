/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, { useEffect, useRef } from "react";
import { useGLTF, useAnimations, useKeyboardControls } from "@react-three/drei";
import { useControls } from "leva";
import { useFrame } from "@react-three/fiber";

const ACTION_MAP = {
	death: "CharacterArmature|Death",
	duck: "CharacterArmature|Duck",
	hitReact: "CharacterArmature|HitReact",
	idle: "CharacterArmature|Idle",
	idleGun: "CharacterArmature|Idle_Gun",
	jump: "CharacterArmature|Jump",
	jumpIdle: "CharacterArmature|Jump_Idle",
	jumpLand: "CharacterArmature|Jump_Land",
	no: "CharacterArmature|No",
	punch: "CharacterArmature|Punch",
	run: "CharacterArmature|Run",
	runGun: "CharacterArmature|Run_Gun",
	runSlash: "CharacterArmature|Run_Slash",
	runStab: "CharacterArmature|Run_Stab",
	stab: "CharacterArmature|Stab",
	walk: "CharacterArmature|Walk",
	walkGun: "CharacterArmature|Walk_Gun",
	wave: "CharacterArmature|Wave",
	yes: "CharacterArmature|Yes",
};

export function Shaun(props) {
	const group = useRef();
	const { nodes, materials, animations } = useGLTF(
		"models/characters/Shaun.glb"
	);
	const { actions } = useAnimations(animations, group);
	console.log("Actions: ", actions);

	const { currentAnimation, animationSpeed } = useControls("Shaun Animation", {
		currentAnimation: {
			value: "idle",
			options: Object.keys(ACTION_MAP),
		},
		animationSpeed: { value: 1, min: 0.1, max: 3, step: 0.1 },
	});

	const [subscribeKeys, getKeys] = useKeyboardControls();

	useEffect(() => {
		const actionName = ACTION_MAP[currentAnimation];
		if (actions[actionName]) {
			Object.values(actions).forEach((action) => action.stop());
			actions[actionName].reset().fadeIn(0.2).play();
			actions[actionName].timeScale = animationSpeed;
		}
	}, [currentAnimation, animationSpeed, actions]);

	useFrame((state, delta) => {
		const { forward, backward, leftward, rightward } = getKeys();
		const movementSpeed = 5;
		const rotationSpeed = 3;

		const isMoving = forward || backward || leftward || rightward;
		if (group.current) {
			if (forward) {
				group.current.position.z -= movementSpeed * delta;
				group.current.rotation.y = 0;
			}
			if (backward) {
				group.current.position.z += movementSpeed * delta;
				group.current.rotation.y = Math.PI;
			}
			if (leftward) {
				group.current.position.x -= movementSpeed * delta;
				group.current.rotation.y = Math.PI / 2;
			}
			if (rightward) {
				group.current.position.x += movementSpeed * delta;
				group.current.rotation.y = -Math.PI / 2;
			}
			if (forward && leftward) {
				group.current.rotation.y = Math.PI / 4;
			} else if (forward && rightward) {
				group.current.rotation.y = -Math.PI / 4;
			} else if (backward && leftward) {
				group.current.rotation.y = (3 * Math.PI) / 4;
			} else if (backward && rightward) {
				group.current.rotation.y = (-3 * Math.PI) / 4;
			}
		}
		const shouldAnimate =
			currentAnimation === "idle" || currentAnimation === "run";

		if (shouldAnimate) {
			const targetAction = isMoving ? "run" : "idle";
			const actionName = ACTION_MAP[targetAction];

			if (actions[actionName] && !actions[actionName].isRunning()) {
				Object.values(actions).forEach((action) => action.stop());

				actions[actionName].reset().fadeIn(0.2).play();
				actions[actionName].timeSCale = animationSpeed;
			}
		}
	});

	return (
		<group ref={group} {...props} dispose={null}>
			<group name='Root_Scene'>
				<group name='RootNode'>
					<group
						name='CharacterArmature'
						rotation={[-Math.PI / 2, 0, 0]}
						scale={100}>
						<primitive object={nodes.Root} />
					</group>
					<skinnedMesh
						name='Shaun'
						geometry={nodes.Shaun.geometry}
						material={materials.Atlas}
						skeleton={nodes.Shaun.skeleton}
						rotation={[-Math.PI / 2, 0, 0]}
						scale={100}
					/>
				</group>
			</group>
		</group>
	);
}

useGLTF.preload("models/characters/Shaun.glb");

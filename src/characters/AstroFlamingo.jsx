/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, { useRef, forwardRef, useEffect, useState } from "react";
import { useGLTF, useAnimations, useKeyboardControls } from "@react-three/drei";
import { useFrame } from "@react-three/fiber";
import * as THREE from "three";

const ACTION_MAP = {
	death: "CharacterArmature|Death",
	duck: "CharacterArmature|Duck",
	hitReact: "CharacterArmature|HitReact",
	idle: "CharacterArmature|Idle",
	idleGun: "CharacterArmature|Idle_Gun",
	jump: "CharacterArmature|Jump",
	jumpIdle: "CharacterArmature|Jump_Idle",
	jumpLand: "CharacterArmature|Jump_Land",
	no: "CharacterArmature|No",
	punch: "CharacterArmature|Punch",
	run: "CharacterArmature|Run",
	runGun: "CharacterArmature|Run_Gun",
	runGunShoot: "CharacterArmature|Run_Gun_Shoot",
	walk: "CharacterArmature|Walk",
	walkGun: "CharacterArmature|Walk_Gun",
	wave: "CharacterArmature|Wave",
	weapon: "CharacterArmature|Weapon",
	yes: "CharacterArmature|Yes",
};

export const FernandoTheFlamingo = forwardRef(function AstroFlamingo(
	props,
	flamingoRef
) {
	const armatureRef = useRef();
	const { nodes, materials, animations } = useGLTF(
		"models/characters/Astronaut.glb"
	);
	const { actions } = useAnimations(animations, armatureRef);
	console.log("Actions: ", actions);

	const [sub, get] = useKeyboardControls();
	const [isMoving, setIsMoving] = useState(false);
	const [currentAnimation, setCurrentAnimation] = useState("idle");

	useEffect(() => {
		const unsubscribe = sub(
			(state) =>
				state.forward || state.backward || state.leftward || state.rightward,
			(pressed) => {
				console.log("Movement key pressed: ", pressed);
				setIsMoving(pressed);

				if (pressed && currentAnimation !== "run") {
					setCurrentAnimation("run");
				} else if (!pressed && currentAnimation !== "idle") {
					setCurrentAnimation("idle");
				}
			}
		);
		return unsubscribe;
	}, [sub, currentAnimation]);

	useEffect(() => {
		const actionName = ACTION_MAP[currentAnimation];
		const targetAction = actions[actionName];

		if (targetAction) {
			console.log("Switching to animation: ", currentAnimation);
			Object.values(actions).forEach((action) => {
				if (action !== targetAction && action.isRunning()) {
					action.fadeOut(0.1);
				}
			});
			targetAction.reset().fadeIn(0.1).play();
		} else {
			console.warn("animation not found: ", actionName);
		}
	}, [currentAnimation, actions]);

	useEffect(() => {
		if (actions && Object.keys(actions).length > 0) {
			const idleAction = actions[ACTION_MAP.idle];
			if (idleAction) {
				idleAction.play();
			}
		} else {
			console.warn("Idle animation not found");
		}
	}, [actions]);

	useFrame((state, delta) => {
		if (!flamingoRef?.current) return;

		if (isMoving) {
			const { forward, backward, leftward, rightward } = get();
			const velocity = new THREE.Vector3();

			if (forward) velocity.z -= 1;
			if (backward) velocity.z += 1;
			if (rightward) velocity.x += 1;
			if (leftward) velocity.x -= 1;

			if (velocity.length() > 0) {
				velocity.normalize();
				velocity.multiplyScalar(delta * 5);
				flamingoRef.current.position.add(velocity);

				const angle = Math.atan2(velocity.x, velocity.z);
				flamingoRef.current.rotation.y = angle;
			}
		}
	});

	return (
		<group ref={flamingoRef} {...props} dispose={null}>
			<group name='Root_Scene'>
				<group name='RootNode'>
					<group
						ref={armatureRef}
						name='CharacterArmature'
						rotation={[-Math.PI / 2, 0, 0]}
						scale={50}>
						<primitive object={nodes.Root} />
					</group>
					<skinnedMesh
						name='FernandoTheFlamingo'
						geometry={nodes.FernandoTheFlamingo.geometry}
						material={materials.Atlas}
						skeleton={nodes.FernandoTheFlamingo.skeleton}
						rotation={[-Math.PI / 2, 0, 0]}
						scale={50}
					/>
				</group>
			</group>
		</group>
	);
});

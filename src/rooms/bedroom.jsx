/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import { useGLTF, Outlines } from "@react-three/drei";
import { useState } from "react";
import { useGameStore } from "../store/gameStore";
import { DoorRound } from "./components/DoorRound";

export default function Bedroom(bedroomClues, ...props) {
	console.log("Clues passed to bedroom: ", bedroomClues);

	const { nodes, materials } = useGLTF("models/rooms/bedroom.glb");
	// const [hovered, setHovered] = useState(false);
	const [hoveredObject, setHoveredObject] = useState(null);

	const { interactWithObject, getObjectStatus } = useGameStore();
	const hoverableClues = Object.keys(bedroomClues["clues"]);
	console.log("Hoverable clues: ", hoverableClues);

	const handlePointerOver = (objectId) => {
		console.log("Object id on Pointer Over: ", objectId);
		if (!hoverableClues.includes(objectId)) return;
		setHoveredObject(objectId);
		document.body.style.cursor = "pointer";
	};

	const handlePointerOut = () => {
		console.log("Hovering out");

		setHoveredObject(null);
		document.body.style.cursor = "grab";
	};

	const handleClick = (e, objectId) => {
		if (e && e.stopPropagation) {
			e.stopPropagation();
		}
		console.log("Clicked, id:", objectId);
		interactWithObject(objectId);
	};

	const getOutlineColor = (objectId) => {
		const status = getObjectStatus(objectId);
		if (status.isFound) return "#90ee90";
		if (status.isClue) return "#ffd700";
		return "aquamarine";
	};

	const { changeRoom } = useGameStore();
	const [hoveredDoor, setHoveredDoor] = useState(null);

	const handleDoorClick = (roomName) => {
		console.log(`Clicked door to ${roomName}`);
		changeRoom(roomName);
	};

	const handleDoorHover = (doorName) => {
		setHoveredDoor(doorName);
		console.log(`Hovered over: ${hoveredDoor}`);
		document.body.style.cursor = "pointer";
	};

	const handleDoorHoverOut = () => {
		setHoveredDoor(null);
		document.body.style.cursor = "grab";
	};

	return (
		<>
			<DoorRound
				position={[5.5, 0, -0.3]}
				scale={3}
				rotation={[0, -Math.PI * 0.5, 0]}
				onPointerOver={() => handleDoorHover("hall")}
				onPointerOut={() => handleDoorHoverOut()}
				onClick={() => handleDoorClick("hall")}
				isHovered={hoveredDoor === "hall"}
			/>

			<group {...props} dispose={null}>
				{/* Bed 1 with blue duvet */}
				<group
					position={[2.981, 0, -1.254]}
					onPointerOver={() => handlePointerOver("bed1")}
					onPointerOut={() => handlePointerOut()}
					onClick={(e) => handleClick(e, "bed1")}>
					<mesh
						castShadow
						receiveShadow
						geometry={nodes.Cube001.geometry}
						material={materials["MI_Trim_Furniture.010"]}>
						{hoveredObject === "bed1" && hoverableClues.includes("bed1") && (
							<Outlines thickness={0.6} color={getOutlineColor("bed1")} />
						)}
					</mesh>
					<mesh
						castShadow
						receiveShadow
						geometry={nodes.Cube001_1.geometry}
						material={materials["MI_Trim_Metal.012"]}>
						{hoveredObject === "bed1" && hoverableClues.includes("bed1") && (
							<Outlines thickness={0.6} color={getOutlineColor("bed1")} />
						)}
					</mesh>
					<mesh
						castShadow
						receiveShadow
						geometry={nodes.Cube001_2.geometry}
						material={materials["MI_Trim_Cloth.003"]}
						// onPointerOver={() => handlePointerOver("bed1")}
						// onPointerOut={() => handlePointerOut()}
						// onClick={(e) => handleClick(e, "bed1")}
					>
						{hoveredObject === "bed1" && hoverableClues.includes("bed1") && (
							<Outlines thickness={2.0} color='aquamarine' />
						)}
					</mesh>
				</group>
				{/* Bed2 on the left*/}
				<group position={[-2.556, 0, -1.23]}>
					<mesh
						castShadow
						receiveShadow
						geometry={nodes.Cube002.geometry}
						material={materials["MI_Trim_Furniture.011"]}
					/>
					<mesh
						castShadow
						receiveShadow
						geometry={nodes.Cube002_1.geometry}
						material={materials["MI_Trim_Metal.013"]}
					/>
					<mesh
						castShadow
						receiveShadow
						geometry={nodes.Cube002_2.geometry}
						material={materials["MI_Trim_Cloth.004"]}
					/>
				</group>
				{/* Book 5 on the right bookshelf, second shelf from the top, solo book at an angle*/}
				<mesh
					castShadow
					receiveShadow
					geometry={nodes.Book_5.geometry}
					material={materials["MI_Trim_Props_Vertex.002"]}
					position={[0.726, 1.571, -2.721]}
					rotation={[0, -1.176, 0]}
				/>
				{/* Something */}
				<group position={[0.021, 0.614, -1.71]} rotation={[0, 0.628, 0]}>
					<mesh
						castShadow
						receiveShadow
						geometry={nodes.Cube133.geometry}
						material={materials["MI_Trim_Props_Vertex.003"]}
					/>
					<mesh
						castShadow
						receiveShadow
						geometry={nodes.Cube133_1.geometry}
						material={materials["MI_Trim_Metal.015"]}
					/>
				</group>
				<group position={[-4.071, 1.004, -2.257]}>
					<mesh
						castShadow
						receiveShadow
						geometry={nodes.Cube151.geometry}
						material={materials["MI_Trim_Props_Vertex.006"]}
					/>
					<mesh
						castShadow
						receiveShadow
						geometry={nodes.Cube151_1.geometry}
						material={materials["MI_Trim_Metal.016"]}
					/>
				</group>
				{/* Books top shelf of left bookshelf */}
				<group position={[-0.907, 0, -2.796]}>
					<mesh
						castShadow
						receiveShadow
						geometry={nodes.Cube168.geometry}
						material={materials["MI_Trim_Furniture.013"]}
					/>
					<mesh
						castShadow
						receiveShadow
						geometry={nodes.Cube168_1.geometry}
						material={materials["MI_Trim_Metal.017"]}
					/>
				</group>
				{/* Books on the right side of the bottom shelf of the left bookshelf */}
				<mesh
					castShadow
					receiveShadow
					geometry={nodes.BookGroup_Small_1.geometry}
					material={materials["MI_Trim_Props_Vertex.010"]}
					position={[-0.693, 0.764, -2.763]}
				/>
				{/* Bottle top right bookshelf */}
				<mesh
					castShadow
					receiveShadow
					geometry={nodes.Bottle_1.geometry}
					material={materials["MI_Trim_Props_Vertex.013"]}
					position={[1.259, 1.92, -2.781]}
					scale={0.621}
					onPointerOver={() => handlePointerOver("bottle")}
					onPointerOut={() => handlePointerOut()}
					onClick={(e) => handleClick(e, "bottle")}>
					{hoveredObject === "bottle" && hoverableClues.includes("bottle") && (
						<Outlines thickness={0.6} color={getOutlineColor("bottle")} />
					)}
				</mesh>
				{/* Bucket  */}
				<mesh
					castShadow
					receiveShadow
					geometry={nodes.Bucket_Metal.geometry}
					material={materials["MI_Trim_Metal.018"]}
					position={[5.396, 0, -0.341]}
					onPointerOver={() => handlePointerOver("bucket")}
					onPointerOut={() => handlePointerOut()}
					onClick={(e) => handleClick(e, "bucket")}>
					{hoveredObject === "bucket" && (
						<Outlines thickness={0.6} color={getOutlineColor("bucket")} />
					)}
				</mesh>
				{/* Dresser next to the right bed */}
				<group position={[4.826, 0, -2.271]}>
					<mesh
						castShadow
						receiveShadow
						geometry={nodes.Cube098.geometry}
						material={materials["MI_Trim_Furniture.016"]}
					/>
					<mesh
						castShadow
						receiveShadow
						geometry={nodes.Cube098_1.geometry}
						material={materials["MI_Trim_Metal.020"]}
					/>
				</group>
				<mesh
					castShadow
					receiveShadow
					geometry={nodes.Cage_Small.geometry}
					material={materials["MI_Trim_Metal.021"]}
					position={[-2.518, 0, 0.936]}
					rotation={[0, 1.482, 0]}
					onPointerOver={() => handlePointerOver("cage")}
					onPointerOut={() => handlePointerOut()}
					onClick={(e) => handleClick(e, "cage")}>
					{hoveredObject === "cage" && hoverableClues.includes("cage") && (
						<Outlines thickness={0.6} color={getOutlineColor("cage")} />
					)}
				</mesh>
				{/* Candle on left bookshelf second shelf from the top */}
				<mesh
					castShadow
					receiveShadow
					geometry={nodes.Candle_1.geometry}
					material={materials["MI_Trim_Props.001"]}
					position={[-0.608, 1.542, -2.77]}
				/>
				{/* Candle on left bookshelf bottom shelf */}
				<mesh
					castShadow
					receiveShadow
					geometry={nodes.Candle_2.geometry}
					material={materials["MI_Trim_Props.002"]}
					position={[-1.181, 0.761, -2.751]}
					scale={0.817}
				/>
				{/* Empty candle stick left bookshelf top shelf on the left */}
				<mesh
					castShadow
					receiveShadow
					geometry={nodes.CandleStick.geometry}
					material={materials["MI_Trim_Metal.022"]}
					position={[-1.239, 1.914, -2.78]}
				/>
				{/* Big group of candle lamps on the right */}
				<group position={[4.25, 0, 1.214]}>
					<mesh
						castShadow
						receiveShadow
						geometry={nodes.Cylinder127.geometry}
						material={materials["MI_Trim_Metal.023"]}
					/>
					<mesh
						castShadow
						receiveShadow
						geometry={nodes.Cylinder127_1.geometry}
						material={materials["MI_Trim_Props_Vertex.014"]}
					/>
				</group>

				{/* Candle Stick on dresser by the right bed with blue blanket */}
				<group
					position={[4.419, 1, -2.266]}
					rotation={[0, 0.353, 0]}
					scale={1.5}>
					{hoveredObject === "candlestick" &&
						hoverableClues.includes("candlestick") && (
							<Outlines
								thickness={0.8}
								color={getOutlineColor("candlestick")}
							/>
						)}
					<mesh
						castShadow
						receiveShadow
						geometry={nodes.Cylinder091.geometry}
						material={materials["MI_Trim_Metal.024"]}
						onPointerOver={() => handlePointerOver("candlestick")}
						onPointerOut={() => handlePointerOut()}
						onClick={(e) => handleClick(e, "candlestick")}>
						{hoveredObject === "candlestick" &&
							hoverableClues.includes("candlestick") && (
								<Outlines
									thickness={0.8}
									color={getOutlineColor("candlestick")}
								/>
							)}
					</mesh>
					<mesh
						onPointerOver={() => handlePointerOver("candlestick")}
						onPointerOut={() => handlePointerOut()}
						onClick={(e) => handleClick(e, "candlestick")}
						castShadow
						receiveShadow
						geometry={nodes.Cylinder091_1.geometry}
						material={materials["MI_Trim_Props.003"]}>
						{hoveredObject === "candlestick" &&
							hoverableClues.includes("candlestick") && (
								<Outlines
									thickness={0.8}
									color={getOutlineColor("candlestick")}
								/>
							)}
					</mesh>
				</group>

				{/* Chalice by the left bed on the dresser  */}
				<mesh
					castShadow
					receiveShadow
					scale={1.5}
					geometry={nodes.Chalice.geometry}
					material={materials["MI_Trim_Metal.028"]}
					position={[-4.35, 1.004, -2.286]}
					onPointerOver={() => handlePointerOver("chalice")}
					onPointerOut={() => handlePointerOut()}
					onClick={(e) => handleClick(e, "chalice")}>
					{hoveredObject === "chalice" &&
						hoverableClues.includes("chalice") && (
							<Outlines thickness={0.9} color={getOutlineColor("chalice")} />
						)}
				</mesh>

				{/* Ceiling Chandelier */}
				<group position={[0.13, 4.241, -0.682]}>
					<mesh
						castShadow
						receiveShadow
						geometry={nodes.Cylinder092.geometry}
						material={materials["MI_Trim_Metal.029"]}
					/>
					<mesh
						castShadow
						receiveShadow
						geometry={nodes.Cylinder092_1.geometry}
						material={materials["MI_Trim_Furniture.018"]}
					/>
					<mesh
						castShadow
						receiveShadow
						geometry={nodes.Cylinder092_2.geometry}
						material={materials["MI_Trim_Props_Vertex.016"]}
					/>
				</group>

				{/* Top shelf middle coin pile right bookshelf */}
				<mesh
					castShadow
					receiveShadow
					geometry={nodes.Coin_Pile.geometry}
					material={materials["MI_Trim_Metal_Vertex.001"]}
					position={[0.842, 1.917, -2.809]}
				/>

				{/* Coin pile dresser by the right bed */}
				<mesh
					castShadow
					receiveShadow
					geometry={nodes.Coin_Pile_2.geometry}
					material={materials["MI_Trim_Metal_Vertex.002"]}
					position={[-4.684, 1.004, -2.239]}
				/>

				{/* Weapon Pell near right bed */}
				<group
					position={[-5.685, 0, -0.954]}
					rotation={[0, 0.754, 0]}
					onPointerOver={() => handlePointerOver("figure")}
					onPointerOut={() => handlePointerOut()}
					onClick={(e) => handleClick(e, "figure")}>
					<mesh
						castShadow
						receiveShadow
						geometry={nodes.Cube223.geometry}
						material={materials["MI_Trim_Furniture.022"]}
					/>
					<mesh
						castShadow
						receiveShadow
						geometry={nodes.Cube223_1.geometry}
						material={materials["MI_Trim_Metal.033"]}
					/>

					<mesh
						castShadow
						receiveShadow
						geometry={nodes.Cube223_2.geometry}
						material={materials["MI_Trim_Cloth.005"]}>
						{hoveredObject === "figure" &&
							hoverableClues.includes("figure") && (
								<Outlines thickness={0.8} color='green' />
							)}
					</mesh>
				</group>

				<mesh
					castShadow
					receiveShadow
					geometry={nodes.Stool.geometry}
					material={materials["MI_Trim_Furniture.023"]}
					position={[-0.001, 0, -1.701]}
					onPointerOver={() => handlePointerOver("Dairy")}
					onPointerOut={() => handlePointerOut()}
					onClick={(e) => handleClick(e, "Dairy")}>
					{hoveredObject === "Dairy" && (
						<Outlines thickness={0.6} color={getOutlineColor("Dairy")} />
					)}
				</mesh>

				{/* 	Right bookshelf */}
				<group position={[0.972, 0, -2.796]}>
					<mesh
						castShadow
						receiveShadow
						geometry={nodes.Cube005.geometry}
						material={materials["MI_Trim_Furniture.013"]}
					/>
					<mesh
						castShadow
						receiveShadow
						geometry={nodes.Cube005_1.geometry}
						material={materials["MI_Trim_Metal.017"]}
					/>
				</group>

				{/* Candle stick lamp group on the left */}
				<group position={[-3.861, 0, 2.058]}>
					<mesh
						castShadow
						receiveShadow
						geometry={nodes.Cylinder001.geometry}
						material={materials["MI_Trim_Metal.023"]}
					/>
					<mesh
						castShadow
						receiveShadow
						geometry={nodes.Cylinder001_1.geometry}
						material={materials["MI_Trim_Props_Vertex.014"]}
					/>
				</group>

				{/* Dresser drawer by the right hand side bed */}
				<group position={[-4.492, 0, -2.239]}>
					<mesh
						castShadow
						receiveShadow
						geometry={nodes.Cube007.geometry}
						material={materials["MI_Trim_Furniture.016"]}
					/>
					<mesh
						castShadow
						receiveShadow
						geometry={nodes.Cube007_1.geometry}
						material={materials["MI_Trim_Metal.020"]}
					/>
				</group>

				{/* Book group on the right of the bottom shelf of the left bookshelf */}
				<mesh
					castShadow
					receiveShadow
					geometry={nodes.BookGroup_Small_2001.geometry}
					material={materials["MI_Trim_Props_Vertex.011"]}
					position={[-0.468, 0.774, -2.736]}
				/>

				{/* Group of books to the right of the second shelf from the bottom of the left bookshelf */}
				<mesh
					castShadow
					receiveShadow
					geometry={nodes.BookGroup_Small_2002.geometry}
					material={materials["MI_Trim_Props_Vertex.011"]}
					position={[-0.676, 1.276, -2.736]}
					rotation={[0, -0.1, -1.587]}
				/>

				{/* Group of books to the left of the second shelf from the bottom of the left bookshelf */}
				<mesh
					castShadow
					receiveShadow
					geometry={nodes.BookGroup_Small_2003.geometry}
					material={materials["MI_Trim_Props_Vertex.011"]}
					position={[-1.36, 1.158, -2.736]}
				/>

				{/* Group of books to the left of the second shelf from the top of the left bookshelf */}
				<mesh
					castShadow
					receiveShadow
					geometry={nodes.BookGroup_Small_2004.geometry}
					material={materials["MI_Trim_Props_Vertex.011"]}
					position={[-1.081, 1.546, -2.736]}
				/>

				{/* Group of books to the top of the left bookshelf */}
				<mesh
					castShadow
					receiveShadow
					geometry={nodes.BookGroup_Small_2005.geometry}
					material={materials["MI_Trim_Props_Vertex.011"]}
					position={[-0.914, 1.924, -2.736]}
				/>

				{/* Empty Candle Stick on bottom shelf of bookshelf of right bookshelf */}
				<mesh
					castShadow
					receiveShadow
					geometry={nodes.CandleStick001.geometry}
					material={materials["MI_Trim_Metal.022"]}
					position={[1.185, 0.772, -2.78]}
				/>

				{/* Group of books to the right second shelf from the top of the right bookshelf */}
				<mesh
					castShadow
					receiveShadow
					geometry={nodes.BookGroup_Small_2006.geometry}
					material={materials["MI_Trim_Props_Vertex.011"]}
					position={[1.075, 1.53, -2.736]}
				/>

				{/* Group of books to the left bottom shelf of the right bookshelf */}
				<mesh
					castShadow
					receiveShadow
					geometry={nodes.BookGroup_Small_2008.geometry}
					material={materials["MI_Trim_Props_Vertex.011"]}
					position={[0.537, 0.775, -2.736]}
				/>

				{/* Group of books to the left of the second shelf from the top of the left bookshelf */}
				<mesh
					castShadow
					receiveShadow
					geometry={nodes.BookGroup_Small_1001.geometry}
					material={materials["MI_Trim_Props_Vertex.010"]}
					position={[-1.312, 1.549, -2.763]}
				/>

				{/* Books on second shelf to the right of the right bookshelf */}
				<mesh
					castShadow
					receiveShadow
					geometry={nodes.BookGroup_Small_1002.geometry}
					material={materials["MI_Trim_Props_Vertex.010"]}
					position={[1.19, 1.158, -2.763]}
					onPointerOver={() => handlePointerOver("books")}
					onPointerOut={() => handlePointerOut()}
					onClick={(e) => handleClick(e, "books")}>
					{hoveredObject === "books" && (
						<Outlines thickness={0.6} color={getOutlineColor("books")} />
					)}
				</mesh>

				{/* Small pile of coins on the left most side of the top book shelf on the right  */}
				<mesh
					castShadow
					receiveShadow
					geometry={nodes.Coin_Pile001.geometry}
					material={materials["MI_Trim_Metal_Vertex.001"]}
					position={[0.603, 1.917, -2.809]}
					rotation={[0, -0.417, 0]}
					scale={0.698}
					onPointerEnter={() => (document.body.style.cursor = "pointer")}
					onPointerLeave={() => (document.body.style.cursor = "grab")}
					onClick={() => {
						console.log("*** YES! Book group clicked ");
					}}
				/>
			</group>
		</>
	);
}

useGLTF.preload("models/rooms/bedroom.glb");

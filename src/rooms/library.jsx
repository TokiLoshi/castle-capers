/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

// import React, { useRef } from "react";
import { useGLTF, Outlines } from "@react-three/drei";
import { useState } from "react";
import { useGameStore } from "../store/gameStore";
import { DoorRound } from "./components/DoorRound";
import { Wall } from "./components/Wall";
import { folder, useControls } from "leva";
import { Window } from "./components/Window";

export default function Library(libraryClues, ...props) {
	const { nodes, materials } = useGLTF("models/library.glb");

	const [hoveredObject, setHoveredObject] = useState(null);
	const { interactWithObject, getObjectStatus } = useGameStore();
	const hoverableClues = Object.keys(libraryClues["clues"]);

	const handlePointerOver = (objectId) => {
		if (!hoverableClues.includes(objectId)) return;
		setHoveredObject(objectId);
		document.body.style.cursor = "pointer";
	};

	const handlePointerOut = () => {
		setHoveredObject(null);
		document.body.style.cursor = "default";
	};

	const handleClick = (e, objectId) => {
		if (e && e.stopPropagation) {
			e.stopPropagation();
		}
		interactWithObject(objectId);
	};

	const getOutlineColor = (objectId) => {
		const status = getObjectStatus(objectId);
		if (status.isFound) return "#90ee90";
		if (status.isClue) return "#ffd700";
		return "aquamarine";
	};

	const { changeRoom } = useGameStore();
	const [hoveredDoor, setHoveredDoor] = useState(null);

	const handleDoorClick = (roomName) => {
		changeRoom(roomName);
	};

	const handleDoorHover = (doorName) => {
		setHoveredDoor(doorName);
		document.body.style.cursor = "pointer";
	};

	const handleDoorHoverOut = () => {
		setHoveredDoor(null);
		document.body.style.cursor = "default";
	};

	const {
		kWall1Px,
		kWall1Py,
		kWall1Pz,
		kWall1Rx,
		kWall1Ry,
		kWall1Rz,
		kWall2Px,
		kWall2Py,
		kWall2Pz,
		kWall2Rx,
		kWall2Ry,
		kWall2Rz,
		kWall3Px,
		kWall3Py,
		kWall3Pz,
		kWall3Rx,
		kWall3Ry,
		kWall3Rz,
		kWall4Px,
		kWall4Py,
		kWall4Pz,
		kWall4Rx,
		kWall4Ry,
		kWall4Rz,
		kWall5Px,
		kWall5Py,
		kWall5Pz,
		kWall5Rx,
		kWall5Ry,
		kWall5Rz,
		kWall6Px,
		kWall6Py,
		kWall6Pz,
		kWall6Rx,
		kWall6Ry,
		kWall6Rz,
		kWall7Px,
		kWall7Py,
		kWall7Pz,
		kWall7Rx,
		kWall7Ry,
		kWall7Rz,
		kWall8Px,
		kWall8Py,
		kWall8Pz,
		kWall8Rx,
		kWall8Ry,
		kWall8Rz,
		kWin1Px,
		kWin1Py,
		kWin1Pz,
		kWin1Rx,
		kWin1Ry,
		kWin1Rz,
		kWin2Px,
		kWin2Py,
		kWin2Pz,
		kWin2Rx,
		kWin2Ry,
		kWin2Rz,
	} = useControls({
		kWalls: folder(
			{
				// wall 1 Position
				kWall1Px: { value: 1.65, min: -10, max: 10, step: 0.01 },
				kWall1Py: { value: 0, min: -10, max: 10, step: 0.01 },
				kWall1Pz: { value: -6.8, min: -10, max: 10, step: 0.01 },
				// lWall 1 Rotation
				kWall1Rx: { value: 0, min: -3, max: 3, step: 0.01 },
				kWall1Ry: { value: 0, min: -3, max: 3, step: 0.01 },
				kWall1Rz: { value: 0, min: -3, max: 3, step: 0.01 },
				// lWall 2 Position
				kWall2Px: { value: -6.1, min: -10, max: 10, step: 0.01 },
				kWall2Py: { value: 0, min: -10, max: 10, step: 0.01 },
				kWall2Pz: { value: -6.8, min: -10, max: 10, step: 0.01 },
				// lWall 2 Rotation
				kWall2Rx: { value: 0, min: -3, max: 3, step: 0.01 },
				kWall2Ry: { value: 0, min: -3, max: 3, step: 0.01 },
				kWall2Rz: { value: 0, min: -3, max: 3, step: 0.01 },
				// lWall 3 Position
				kWall3Px: { value: 7.54, min: -10, max: 10, step: 0.01 },
				kWall3Py: { value: 0, min: -10, max: 10, step: 0.01 },
				kWall3Pz: { value: -4.8, min: -10, max: 10, step: 0.01 },
				// lWall 3 Rotation
				kWall3Rx: { value: 0, min: -3, max: 3, step: 0.01 },
				kWall3Ry: { value: Math.PI * 0.5, min: -3, max: 3, step: 0.01 },
				kWall3Rz: { value: 0, min: -3, max: 3, step: 0.01 },
				// lWall 4 Position
				kWall4Px: { value: 7.54, min: -10, max: 10, step: 0.01 },
				kWall4Py: { value: 0, min: -10, max: 10, step: 0.01 },
				kWall4Pz: { value: -0.85, min: -10, max: 10, step: 0.01 },
				// lWall 4 Rotation
				kWall4Rx: { value: 0, min: -3, max: 3, step: 0.01 },
				kWall4Ry: { value: Math.PI * 0.5, min: -3, max: 3, step: 0.01 },
				kWall4Rz: { value: -0, min: -3, max: 3, step: 0.01 },
				// lWall 5 Position
				kWall5Px: { value: 5.56, min: -10, max: 10, step: 0.01 },
				kWall5Py: { value: 0, min: -10, max: 10, step: 0.01 },
				kWall5Pz: { value: -6.8, min: -10, max: 10, step: 0.01 },
				// lWall 5 Rotation
				kWall5Rx: { value: 0, min: -3, max: 3, step: 0.01 },
				kWall5Ry: { value: 0, min: -3, max: 3, step: 0.01 },
				kWall5Rz: { value: 0, min: -3, max: 3, step: 0.01 },
				// lWall 6 Position
				kWall6Px: { value: -8.7, min: -10, max: 10, step: 0.01 },
				kWall6Py: { value: 0, min: -10, max: 10, step: 0.01 },
				kWall6Pz: { value: -6, min: -10, max: 10, step: 0.01 },
				// lWall 6 Rotation
				kWall6Rx: { value: 0, min: -3, max: 3, step: 0.01 },
				kWall6Ry: { value: 0.92, min: -3, max: 3, step: 0.01 },
				kWall6Rz: { value: 0, min: -3, max: 3, step: 0.01 },
				// lWall 7 Position
				kWall7Px: { value: -9.6, min: -10, max: 10, step: 0.01 },
				kWall7Py: { value: 0, min: -10, max: 10, step: 0.01 },
				kWall7Pz: { value: 1.12, min: -10, max: 10, step: 0.01 },
				// lWall 7 Rotation
				kWall7Rx: { value: 0, min: -3, max: 3, step: 0.01 },
				kWall7Ry: { value: Math.PI * 0.5, min: -3, max: 3, step: 0.01 },
				kWall7Rz: { value: -0, min: -3, max: 3, step: 0.01 },
				// lWall 8 Position
				kWall8Px: { value: 7.54, min: -10, max: 10, step: 0.01 },
				kWall8Py: { value: 0, min: -10, max: 10, step: 0.01 },
				kWall8Pz: { value: 1.72, min: -10, max: 10, step: 0.01 },
				// lWall 8 Rotation
				kWall8Rx: { value: 0, min: -3, max: 3, step: 0.01 },
				kWall8Ry: { value: Math.PI * 0.5, min: -3, max: 3, step: 0.01 },
				kWall8Rz: { value: -0, min: -3, max: 3, step: 0.01 },
			},
			{ collapsed: true }
		),
		Windows: folder(
			{
				kWin1Px: { value: -2.2, min: -10, max: 10, step: 0.01 },
				kWin1Py: { value: 0, min: -10, max: 10, step: 0.01 },
				kWin1Pz: { value: -6.8, min: -10, max: 10, step: 0.01 },
				// lWin 1 rotation
				kWin1Rx: { value: 0, min: -10, max: 10, step: 0.01 },
				kWin1Ry: { value: 0, min: -10, max: 10, step: 0.01 },
				kWin1Rz: { value: 0, min: -10, max: 10, step: 0.01 },
				// lWin 2 position
				kWin2Px: { value: -9.6, min: -20, max: 20, step: 0.01 },
				kWin2Py: { value: 0, min: -20, max: 20, step: 0.01 },
				kWin2Pz: { value: -2.8, min: -20, max: 20, step: 0.01 },
				// lWin 2 rotation
				kWin2Rx: { value: 0, min: -10, max: 10, step: 0.01 },
				kWin2Ry: { value: 1.57, min: -10, max: 10, step: 0.01 },
				kWin2Rz: { value: 0, min: -10, max: 10, step: 0.01 },
			},
			{ collapsed: true }
		),
	});

	return (
		<>
			<DoorRound
				position={[6.5, 0, -0.3]}
				scale={3}
				rotation={[0, -Math.PI * 0.5, 0]}
				onPointerOver={() => handleDoorHover("hall")}
				onPointerOut={() => handleDoorHoverOut()}
				onClick={() => handleDoorClick("hall")}
				isHovered={hoveredDoor === "hall"}
			/>
			<Wall
				position={[kWall1Px, kWall1Py, kWall1Pz]}
				rotation={[kWall1Rx, kWall1Ry, kWall1Rz]}
				scale={2}
			/>
			<Wall
				position={[kWall2Px, kWall2Py, kWall2Pz]}
				scale={2}
				rotation={[kWall2Rx, kWall2Ry, kWall2Rz]}
			/>
			<Wall
				position={[kWall3Px, kWall3Py, kWall3Pz]}
				rotation={[kWall3Rx, kWall3Ry, kWall3Rz]}
				scale={2}
			/>
			<Wall
				position={[kWall4Px, kWall4Py, kWall4Pz]}
				rotation={[kWall4Rx, kWall4Ry, kWall4Rz]}
				scale={2}
			/>
			<Window
				scale={2}
				position={[kWin1Px, kWin1Py, kWin1Pz]}
				rotation={[kWin1Rx, kWin1Ry, kWin1Rz]}
			/>
			<Window
				position={[kWin2Px, kWin2Py, kWin2Pz]}
				rotation={[kWin2Rx, kWin2Ry, kWin2Rz]}
				scale={2}
			/>
			<Wall
				position={[kWall5Px, kWall5Py, kWall5Pz]}
				rotation={[kWall5Rx, kWall5Ry, kWall5Rz]}
				scale={2}
			/>
			<Wall
				position={[kWall6Px, kWall6Py, kWall6Pz]}
				rotation={[kWall6Rx, kWall6Ry, kWall6Rz]}
				scale={2}
			/>
			<Wall
				position={[kWall7Px, kWall7Py, kWall7Pz]}
				rotation={[kWall7Rx, kWall7Ry, kWall7Rz]}
				scale={2}
			/>
			<Wall
				position={[kWall8Px, kWall8Py, kWall8Pz]}
				rotation={[kWall8Rx, kWall8Ry, kWall8Rz]}
				scale={2}
			/>
			<mesh position={[-1, 1, 1]} visible={false}>
				<boxGeometry args={[18, 3, 0.2]} />
				<meshBasicMaterial transparent opacity={0} />
			</mesh>

			<group {...props} dispose={null}>
				{/* Anvil */}
				<group
					position={[-4.96, 0, -6.506]}
					onPointerOver={() => handlePointerOver("anvil")}
					onPointerOut={() => handlePointerOut()}
					onClick={(e) => handleClick(e, "anvil")}>
					<mesh
						castShadow
						receiveShadow
						geometry={nodes.Cylinder036.geometry}
						material={materials.MI_Trim_Furniture}
					/>

					<mesh
						castShadow
						receiveShadow
						geometry={nodes.Cylinder036_1.geometry}
						material={materials["MI_Trim_Metal.001"]}>
						{hoveredObject === "anvil" && hoverableClues.includes("anvil") && (
							<Outlines thickness={0.6} color={getOutlineColor("anvil")} />
						)}
					</mesh>
					<mesh
						castShadow
						receiveShadow
						geometry={nodes.Cylinder036_2.geometry}
						material={materials.MI_Trim_Props}
					/>
				</group>
				{/* Flag */}
				<group
					position={[0.052, 2.495, -6.616]}
					scale={0.735}
					onPointerOver={() => handlePointerOver("flag")}
					onPointerOut={() => handlePointerOut()}
					onClick={(e) => handleClick(e, "flag")}>
					<mesh
						castShadow
						receiveShadow
						geometry={nodes.Cube227.geometry}
						material={materials["MI_Trim_Metal.003"]}>
						{" "}
						{hoveredObject === "anvil" && hoverableClues.includes("anvil") && (
							<Outlines thickness={0.6} color={getOutlineColor("anvil")} />
						)}
					</mesh>
					<mesh
						castShadow
						receiveShadow
						geometry={nodes.Cube227_1.geometry}
						material={materials["MI_Banner.001"]}>
						{hoveredObject === "anvil" && hoverableClues.includes("anvil") && (
							<Outlines thickness={0.6} color={getOutlineColor("anvil")} />
						)}
					</mesh>
				</group>
				{/* Front Bench */}
				<group position={[-2.345, -0.019, -1.774]}>
					<mesh
						castShadow
						receiveShadow
						geometry={nodes.Cube011.geometry}
						material={materials["MI_Trim_Furniture.009"]}
					/>
					<mesh
						castShadow
						receiveShadow
						geometry={nodes.Cube011_1.geometry}
						material={materials["MI_Trim_Metal.011"]}
					/>
				</group>
				{/* Book on the table */}
				<mesh
					castShadow
					receiveShadow
					geometry={nodes.Book_5.geometry}
					material={materials["MI_Trim_Props_Vertex.002"]}
					position={[-2.929, 0.896, -2.77]}
					rotation={[0, 0.691, 0]}
				/>
				{/* Book stand */}
				<group
					position={[-8.74, 1.333, -4.827]}
					rotation={[1.05, 0.48, -0.772]}
					onPointerOver={() => handlePointerOver("bookstand")}
					onPointerOut={() => handlePointerOut()}
					onClick={(e) => handleClick(e, "bookstand")}>
					<mesh
						castShadow
						receiveShadow
						geometry={nodes.Cube133.geometry}
						material={materials["MI_Trim_Props_Vertex.003"]}>
						{hoveredObject === "bookstand" &&
							hoverableClues.includes("bookstand") && (
								<Outlines
									thickness={0.6}
									color={getOutlineColor("bookstand")}
								/>
							)}
					</mesh>

					<mesh
						castShadow
						receiveShadow
						geometry={nodes.Cube133_1.geometry}
						material={materials["MI_Trim_Metal.012"]}>
						{hoveredObject === "bookstand" &&
							hoverableClues.includes("bookstand") && (
								<Outlines
									thickness={0.6}
									color={getOutlineColor("bookstand")}
								/>
							)}
					</mesh>
				</group>
				{/* Book on left shelf */}
				<mesh
					castShadow
					receiveShadow
					geometry={nodes.Book_Simplified_Single.geometry}
					material={materials["MI_Trim_Props_Vertex.004"]}
					position={[-7.046, 1.155, -6.644]}
				/>
				{/* Book on left shelf bottom shelf */}
				<mesh
					castShadow
					receiveShadow
					geometry={nodes.Book_Stack_1.geometry}
					material={materials["MI_Trim_Props_Vertex.005"]}
					position={[-6.24, 0.764, -6.613]}
				/>

				{/* Stack of bound books on right shelf */}
				<group
					position={[-2.302, 0.765, -6.547]}
					rotation={[0, 0.196, 0]}
					scale={0.757}>
					<mesh
						castShadow
						receiveShadow
						geometry={nodes.Cube151.geometry}
						material={materials["MI_Trim_Props_Vertex.006"]}
					/>
					<mesh
						castShadow
						receiveShadow
						geometry={nodes.Cube151_1.geometry}
						material={materials["MI_Trim_Metal.013"]}
					/>
				</group>

				{/* Middle left shelf */}
				<group position={[-3.299, 0, -6.609]}>
					<mesh
						castShadow
						receiveShadow
						geometry={nodes.Cube168.geometry}
						material={materials["MI_Trim_Furniture.010"]}
					/>
					<mesh
						castShadow
						receiveShadow
						geometry={nodes.Cube168_1.geometry}
						material={materials["MI_Trim_Metal.014"]}
					/>
				</group>
				{/* Book group Middle left shelf */}
				<mesh
					castShadow
					receiveShadow
					geometry={nodes.BookGroup_Medium_1.geometry}
					material={materials["MI_Trim_Props_Vertex.007"]}
					position={[-3.342, 1.148, -6.535]}
				/>
				{/* Books on floating shelf on left */}
				{/* <mesh
					castShadow
					receiveShadow
					geometry={nodes.BookGroup_Medium_2.geometry}
					material={materials["MI_Trim_Props_Vertex.008"]}
					position={[-8.045, 1.096, -6.566]}
				/> */}

				{/* Books bottom shelf of middle left bookshelf */}
				<mesh
					castShadow
					receiveShadow
					geometry={nodes.BookGroup_Medium_3.geometry}
					material={materials["MI_Trim_Props_Vertex.009"]}
					position={[-3.248, 0.765, -6.581]}
				/>
				{/* Book group second shelf from top left most bookshelf */}
				<mesh
					castShadow
					receiveShadow
					geometry={nodes.BookGroup_Small_1.geometry}
					material={materials["MI_Trim_Props_Vertex.010"]}
					position={[-6.905, 1.529, -6.584]}
				/>
				{/* Books top shelf left most bookshelf */}
				<mesh
					castShadow
					receiveShadow
					geometry={nodes.BookGroup_Small_2.geometry}
					material={materials["MI_Trim_Props_Vertex.011"]}
					position={[-6.612, 1.918, -6.615]}
				/>

				{/* Books bottom shelf left most bookshelf */}
				<mesh
					castShadow
					receiveShadow
					geometry={nodes.BookGroup_Small_3.geometry}
					material={materials["MI_Trim_Props_Vertex.012"]}
					position={[-6.538, 0.767, -6.548]}
				/>
				<mesh
					castShadow
					receiveShadow
					geometry={nodes.BookStand.geometry}
					material={materials["MI_Trim_Furniture.011"]}
					position={[-8.741, 0, -4.82]}
					rotation={[0, 0.858, 0]}
					onPointerOver={() => handlePointerOver("bookstand")}
					onPointerOut={() => handlePointerOut()}
					onClick={(e) => handleClick(e, "bookstand")}>
					{hoveredObject === "bookstand" &&
						hoverableClues.includes("bookstand") && (
							<Outlines thickness={0.6} color={getOutlineColor("bookstand")} />
						)}
				</mesh>

				{/* Bottles right bookshelf */}
				<mesh
					castShadow
					receiveShadow
					geometry={nodes.Bottle_1.geometry}
					material={materials["MI_Trim_Props_Vertex.013"]}
					position={[1.636, 1.523, -6.575]}
					scale={0.658}
				/>
				{/* Bucket */}
				<mesh
					castShadow
					receiveShadow
					geometry={nodes.Bucket_Metal.geometry}
					material={materials["MI_Trim_Metal.015"]}
					position={[-5.584, 0, -1.955]}
				/>

				{/* CandleStick */}
				<mesh
					castShadow
					receiveShadow
					geometry={nodes.CandleStick.geometry}
					material={materials["MI_Trim_Metal.019"]}
					position={[1.585, 0.809, -2.394]}
				/>

				{/* Candleabra lamp thing on the right */}
				<group position={[3.534, 0, -6.442]}>
					<mesh
						castShadow
						receiveShadow
						geometry={nodes.Cylinder127.geometry}
						material={materials["MI_Trim_Metal.020"]}
					/>
					<mesh
						castShadow
						receiveShadow
						geometry={nodes.Cylinder127_1.geometry}
						material={materials["MI_Trim_Props_Vertex.014"]}
					/>
				</group>

				{/* Big Pot on table */}
				<group
					position={[3.492, 0.794, -3.476]}
					rotation={[0, -0.995, 0]}
					onPointerOver={() => handlePointerOver("candlestick")}
					onPointerOut={() => handlePointerOut()}
					onClick={(e) => handleClick(e, "candlestick")}>
					<mesh
						castShadow
						receiveShadow
						geometry={nodes.Cylinder091.geometry}
						material={materials["MI_Trim_Metal.021"]}>
						{hoveredObject === "candlestick" &&
							hoverableClues.includes("candlestick") && (
								<Outlines
									thickness={0.6}
									color={getOutlineColor("candlestick")}
								/>
							)}
					</mesh>

					<mesh
						castShadow
						receiveShadow
						geometry={nodes.Cylinder091_1.geometry}
						material={materials["MI_Trim_Props.003"]}>
						{hoveredObject === "bookstand" &&
							hoverableClues.includes("bookstand") && (
								<Outlines
									thickness={0.6}
									color={getOutlineColor("bookstand")}
								/>
							)}
					</mesh>
				</group>

				{/* Chain */}
				<mesh
					castShadow
					receiveShadow
					geometry={nodes.Chain_Coil.geometry}
					material={materials["MI_Trim_Metal.023"]}
					position={[-7.05, 0.81, -3.716]}
					onPointerOver={() => handlePointerOver("chain")}
					onPointerOut={() => handlePointerOut()}
					onClick={(e) => handleClick(e, "chain")}>
					{hoveredObject === "chain" && hoverableClues.includes("chain") && (
						<Outlines thickness={0.6} color={getOutlineColor("chain")} />
					)}
				</mesh>

				{/* Top Chair to the right */}
				<group position={[2.183, 0, -3.811]} rotation={[0, 0.481, 0]}>
					<mesh
						castShadow
						receiveShadow
						geometry={nodes.Cube180.geometry}
						material={materials["MI_Trim_Furniture.014"]}
					/>
					<mesh
						castShadow
						receiveShadow
						geometry={nodes.Cube180_1.geometry}
						material={materials["MI_Trim_Metal.024"]}
					/>
				</group>

				{/* Coin pile on the table */}
				<mesh
					castShadow
					receiveShadow
					geometry={nodes.Coin_Pile.geometry}
					material={materials["MI_Trim_Metal_Vertex.001"]}
					position={[-6.151, 0.831, -2.812]}
					rotation={[0, 0.444, 0]}
				/>
				<group
					position={[-7.222, -0.02, -1.778]}
					scale={0.784}
					onPointerOver={() => handlePointerOver("crate")}
					onPointerOut={() => handlePointerOut()}
					onClick={(e) => handleClick(e, "crate")}>
					<mesh
						castShadow
						receiveShadow
						geometry={nodes.Cube035.geometry}
						material={materials["MI_Trim_Furniture.017"]}>
						{hoveredObject === "crate" && hoverableClues.includes("crate") && (
							<Outlines thickness={0.6} color={getOutlineColor("crate")} />
						)}
					</mesh>
					<mesh
						castShadow
						receiveShadow
						geometry={nodes.Cube035_1.geometry}
						material={materials["MI_Trim_Metal.028"]}>
						{hoveredObject === "crate" && hoverableClues.includes("crate") && (
							<Outlines thickness={0.6} color={getOutlineColor("crate")} />
						)}
					</mesh>
				</group>
				{/* Key */}
				<mesh
					castShadow
					receiveShadow
					geometry={nodes.Key_Gold.geometry}
					material={materials["MI_Trim_Metal_Vertex.003"]}
					position={[2.921, 0.854, -3.445]}
					// position={[2.921, 1.354, -3.445]}
					scale={3}
					onPointerOver={() => handlePointerOver("key")}
					onPointerOut={() => handlePointerOut()}
					onClick={(e) => handleClick(e, "key")}>
					{hoveredObject === "key" && hoverableClues.includes("key") && (
						<Outlines thickness={0.6} color={getOutlineColor("key")} />
					)}
				</mesh>
				{/* Red Hering key on the left */}
				<mesh
					castShadow
					receiveShadow
					geometry={nodes.Key_Metal.geometry}
					material={materials["MI_Trim_Metal.034"]}
					position={[-6.567, 0.81, -2.822]}
					scale={1.513}
				/>

				{/* Lantern */}
				<mesh
					castShadow
					receiveShadow
					geometry={nodes.Lantern_Wall.geometry}
					material={materials["MI_Trim_Metal.035"]}
					position={[4.332, 1.607, -6.716]}
				/>

				{/* Bound Book */}
				<group position={[2.329, 1.538, -6.574]} scale={1.287}>
					<mesh
						castShadow
						receiveShadow
						geometry={nodes.Cylinder068.geometry}
						material={materials["MI_Trim_Metal.036"]}
					/>
					<mesh
						castShadow
						receiveShadow
						geometry={nodes.Cylinder068_1.geometry}
						material={materials["MI_Trim_Furniture.023"]}
					/>
				</group>

				{/* Bootle bottom shelf right most bookshelf */}
				<mesh
					castShadow
					receiveShadow
					geometry={nodes.Potion_2.geometry}
					material={materials["MI_Trim_Props_Vertex.021"]}
					position={[2.364, 0.758, -6.613]}
					scale={0.804}
				/>
				{/* 
			Scroll */}
				<group
					position={[-5.861, 0.819, -2.677]}
					onPointerOver={() => handlePointerOver("scroll")}
					onPointerOut={() => handlePointerOut()}
					onClick={(e) => handleClick(e, "scroll")}>
					<mesh
						castShadow
						receiveShadow
						geometry={nodes.Cube152.geometry}
						material={materials.MI_Page_Empty}>
						{hoveredObject === "scroll" &&
							hoverableClues.includes("scroll") && (
								<Outlines thickness={0.6} color={getOutlineColor("scroll")} />
							)}
					</mesh>
					<mesh
						castShadow
						receiveShadow
						geometry={nodes.Cube152_1.geometry}
						material={materials["MI_Trim_Props_Vertex.024"]}
					/>
				</group>

				{/* Shelf */}
				{/* <mesh
					castShadow
					receiveShadow
					geometry={nodes.Shelf_Simple.geometry}
					material={materials["MI_Trim_Furniture.030"]}
					position={[-8.041, 0.417, -6.793]}
				/> */}

				{/* Potions */}
				<group
					position={[0.076, 0, -6.759]}
					onPointerOver={() => handlePointerOver("potions")}
					onPointerOut={() => handlePointerOut()}
					onClick={(e) => handleClick(e, "potions")}>
					<mesh
						castShadow
						receiveShadow
						geometry={nodes.Cube166.geometry}
						material={materials["MI_Trim_Props_Vertex.026"]}>
						{hoveredObject === "potions" &&
							hoverableClues.includes("potions") && (
								<Outlines thickness={0.6} color={getOutlineColor("potions")} />
							)}
					</mesh>
					<mesh
						castShadow
						receiveShadow
						geometry={nodes.Cube166_1.geometry}
						material={materials["MI_Trim_Metal.042"]}>
						{" "}
						{hoveredObject === "potions" &&
							hoverableClues.includes("potions") && (
								<Outlines thickness={0.6} color={getOutlineColor("potions")} />
							)}
					</mesh>
					<mesh
						castShadow
						receiveShadow
						geometry={nodes.Cube166_2.geometry}
						material={materials["MI_Trim_Furniture.031"]}>
						{hoveredObject === "potions" &&
							hoverableClues.includes("potions") && (
								<Outlines thickness={0.6} color={getOutlineColor("potions")} />
							)}
					</mesh>
				</group>

				{/* Shield of Arms */}
				<group position={[-4.964, 1.85, -6.564]}>
					<mesh
						castShadow
						receiveShadow
						geometry={nodes.Cube193.geometry}
						material={materials["MI_Trim_Furniture.032"]}
					/>
					<mesh
						castShadow
						receiveShadow
						geometry={nodes.Cube193_1.geometry}
						material={materials["MI_Trim_Metal_Vertex.004"]}
					/>
					<mesh
						castShadow
						receiveShadow
						geometry={nodes.Cube193_2.geometry}
						material={materials["MI_Trim_Props.004"]}
					/>
				</group>

				{/* Sword */}
				<mesh
					castShadow
					receiveShadow
					geometry={nodes.Sword_Bronze.geometry}
					material={materials["MI_Trim_Props_Vertex.029"]}
					position={[-2.046, 0.902, -2.921]}
					rotation={[1.533, -0.014, 1.7]}
					onPointerOver={() => handlePointerOver("sword")}
					onPointerOut={() => handlePointerOut()}
					onClick={(e) => handleClick(e, "sword")}>
					{hoveredObject === "sword" && hoverableClues.includes("sword") && (
						<Outlines thickness={0.6} color={getOutlineColor("sword")} />
					)}
				</mesh>
				<group position={[2.469, 0, -2.862]} rotation={[0, 0.521, 0]}>
					<mesh
						castShadow
						receiveShadow
						geometry={nodes.Cube084.geometry}
						material={materials["MI_Trim_Furniture.036"]}
					/>
					<mesh
						castShadow
						receiveShadow
						geometry={nodes.Cube084_1.geometry}
						material={materials["MI_Trim_Metal.047"]}
					/>
				</group>
				{/* 
			Plate */}
				<mesh
					castShadow
					receiveShadow
					geometry={nodes.Table_Plate.geometry}
					material={materials["MI_Trim_Metal.048"]}
					position={[-6.148, 0.82, -2.806]}
				/>
				{/* Vase */}
				<mesh
					castShadow
					receiveShadow
					geometry={nodes.Vase_2.geometry}
					material={materials["MI_Trim_Props_Vertex.030"]}
					position={[2.586, 0.823, -2.918]}
					onPointerOver={() => handlePointerOver("aromatic-pot")}
					onPointerOut={() => handlePointerOut()}
					onClick={(e) => handleClick(e, "aromatic-pot")}>
					{hoveredObject === "aromatic-pot" &&
						hoverableClues.includes("aromatic-pot") && (
							<Outlines
								thickness={0.6}
								color={getOutlineColor("aromatic-pot")}
							/>
						)}
				</mesh>

				{/* Table */}
				<group position={[-2.445, -0.017, -2.945]}>
					<mesh
						castShadow
						receiveShadow
						geometry={nodes.Cube163.geometry}
						material={materials["MI_Trim_Furniture.039"]}
					/>
					<mesh
						castShadow
						receiveShadow
						geometry={nodes.Cube163_1.geometry}
						material={materials["MI_Trim_Metal.053"]}
					/>
				</group>

				{/* Middle right bookshelf */}
				<group position={[-1.848, 0, -6.609]}>
					<mesh
						castShadow
						receiveShadow
						geometry={nodes.Cube003.geometry}
						material={materials["MI_Trim_Furniture.010"]}
					/>
					<mesh
						castShadow
						receiveShadow
						geometry={nodes.Cube003_1.geometry}
						material={materials["MI_Trim_Metal.014"]}
					/>
				</group>

				{/* Top Right Bookshelf */}
				<group position={[2.072, 0, -6.609]}>
					<mesh
						castShadow
						receiveShadow
						geometry={nodes.Cube004.geometry}
						material={materials["MI_Trim_Furniture.010"]}
					/>
					<mesh
						castShadow
						receiveShadow
						geometry={nodes.Cube004_1.geometry}
						material={materials["MI_Trim_Metal.014"]}
					/>
				</group>

				{/* Left most bookshelf */}
				<group position={[-6.531, 0, -6.609]}>
					<mesh
						castShadow
						receiveShadow
						geometry={nodes.Cube005.geometry}
						material={materials["MI_Trim_Furniture.010"]}
					/>
					<mesh
						castShadow
						receiveShadow
						geometry={nodes.Cube005_1.geometry}
						material={materials["MI_Trim_Metal.014"]}
					/>
				</group>

				{/* Top bench */}
				<group position={[-2.345, 0, -4.055]}>
					<mesh
						castShadow
						receiveShadow
						geometry={nodes.Cube006.geometry}
						material={materials["MI_Trim_Furniture.009"]}
					/>
					<mesh
						castShadow
						receiveShadow
						geometry={nodes.Cube006_1.geometry}
						material={materials["MI_Trim_Metal.011"]}
					/>
				</group>

				{/* Left table */}
				<group position={[-6.655, 0, -3.259]} rotation={[0, -0.749, 0]}>
					<mesh
						castShadow
						receiveShadow
						geometry={nodes.Cube007.geometry}
						material={materials["MI_Trim_Furniture.036"]}
					/>
					<mesh
						castShadow
						receiveShadow
						geometry={nodes.Cube007_1.geometry}
						material={materials["MI_Trim_Metal.047"]}
					/>
				</group>
				{/* Lantern */}
				<mesh
					castShadow
					receiveShadow
					geometry={nodes.Lantern_Wall001.geometry}
					material={materials["MI_Trim_Metal.035"]}
					position={[-7.904, 1.607, -6.716]}
				/>

				{/* Rightmost bottom chair */}
				<group
					position={[3.506, 0, -2.302]}
					rotation={[Math.PI, -0.497, Math.PI]}>
					<mesh
						castShadow
						receiveShadow
						geometry={nodes.Cube009.geometry}
						material={materials["MI_Trim_Furniture.014"]}
					/>
					<mesh
						castShadow
						receiveShadow
						geometry={nodes.Cube009_1.geometry}
						material={materials["MI_Trim_Metal.024"]}
					/>
				</group>

				{/* Leftmost bottom chair */}
				<group
					position={[2.419, 0, -1.726]}
					rotation={[Math.PI, -0.497, Math.PI]}>
					<mesh
						castShadow
						receiveShadow
						geometry={nodes.Cube012.geometry}
						material={materials["MI_Trim_Furniture.014"]}
					/>
					<mesh
						castShadow
						receiveShadow
						geometry={nodes.Cube012_1.geometry}
						material={materials["MI_Trim_Metal.024"]}
					/>
				</group>
				{/* Simple shelf */}
				{/* <mesh
					castShadow
					receiveShadow
					geometry={nodes.Shelf_Simple001.geometry}
					material={materials["MI_Trim_Furniture.030"]}
					position={[-8.041, 0.987, -6.793]}
				/> */}
				{/* Second top shelf books on left bookshelf */}
				<mesh
					castShadow
					receiveShadow
					geometry={nodes.BookGroup_Medium_3001.geometry}
					material={materials["MI_Trim_Props_Vertex.009"]}
					position={[-1.918, 1.536, -6.581]}
				/>

				{/* Bottomshelf books middle right */}
				<mesh
					castShadow
					receiveShadow
					geometry={nodes.BookGroup_Medium_1001.geometry}
					material={materials["MI_Trim_Props_Vertex.007"]}
					position={[-1.702, 0.767, -6.535]}
					scale={0.853}
				/>
				{/* Topshelf books left middle bookshelf */}
				<group position={[-3.32, 1.916, -6.537]} rotation={[0, -0.144, 0]}>
					<mesh
						castShadow
						receiveShadow
						geometry={nodes.Cube020.geometry}
						material={materials["MI_Trim_Props_Vertex.006"]}
					/>
					<mesh
						castShadow
						receiveShadow
						geometry={nodes.Cube020_1.geometry}
						material={materials["MI_Trim_Metal.013"]}
					/>
				</group>

				{/* Bottom shelf books right bookshelf */}
				<mesh
					castShadow
					receiveShadow
					geometry={nodes.BookGroup_Small_1001.geometry}
					material={materials["MI_Trim_Props_Vertex.010"]}
					position={[1.654, 0.789, -6.584]}
					scale={0.868}
				/>
				{/* Fallen over potion bottle */}
				<mesh
					castShadow
					receiveShadow
					geometry={nodes.Potion_2001.geometry}
					material={materials["MI_Trim_Props_Vertex.021"]}
					position={[-6.093, 1.215, -6.612]}
					rotation={[0, 0, 1.774]}
					scale={0.822}
				/>
				{/* Potion Bottle */}
				<mesh
					castShadow
					receiveShadow
					geometry={nodes.Potion_2002.geometry}
					material={materials["MI_Trim_Props_Vertex.021"]}
					position={[1.754, 1.529, -6.613]}
					scale={0.747}
				/>
				{/* books right bookshelf */}
				<mesh
					castShadow
					receiveShadow
					geometry={nodes.BookGroup_Medium_3002.geometry}
					material={materials["MI_Trim_Props_Vertex.009"]}
					position={[2.165, 1.133, -6.581]}
				/>

				{/* Stacked books left most bookshelf */}
				<group position={[-6.267, 1.533, -6.537]} rotation={[0, -0.533, 0]}>
					<mesh
						castShadow
						receiveShadow
						geometry={nodes.Cube001.geometry}
						material={materials["MI_Trim_Props_Vertex.006"]}
					/>
					<mesh
						castShadow
						receiveShadow
						geometry={nodes.Cube001_1.geometry}
						material={materials["MI_Trim_Metal.013"]}
					/>
				</group>

				{/* left most stacked books bottom shelf left most bookshelf */}
				<mesh
					castShadow
					receiveShadow
					geometry={nodes.BookGroup_Small_3001.geometry}
					material={materials["MI_Trim_Props_Vertex.012"]}
					position={[-7.007, 0.767, -6.548]}
				/>
				{/* second shelf books most left bookshelf */}
				<mesh
					castShadow
					receiveShadow
					geometry={nodes.BookGroup_Small_3002.geometry}
					material={materials["MI_Trim_Props_Vertex.012"]}
					position={[-6.679, 1.54, -6.548]}
				/>
				{/* Left potions left most bookshelf */}
				<mesh
					castShadow
					receiveShadow
					geometry={nodes.Potion_2003.geometry}
					material={materials["MI_Trim_Props_Vertex.021"]}
					position={[-6.947, 1.154, -6.613]}
					scale={0.627}
				/>
				<mesh
					castShadow
					receiveShadow
					geometry={nodes.Potion_2004.geometry}
					material={materials["MI_Trim_Props_Vertex.021"]}
					position={[-6.84, 1.154, -6.613]}
					scale={0.944}
				/>
				{/* Single book left most bookshelf */}
				<mesh
					castShadow
					receiveShadow
					geometry={nodes.Book_Simplified_Single001.geometry}
					material={materials["MI_Trim_Props_Vertex.004"]}
					position={[-5.993, 1.155, -6.644]}
				/>
				{/* Top shelf vase right book shelf */}
				<mesh
					castShadow
					receiveShadow
					geometry={nodes.Vase_2001.geometry}
					material={materials["MI_Trim_Props_Vertex.030"]}
					position={[2.062, 1.923, -6.59]}
					scale={0.352}
				/>
			</group>
		</>
	);
}

useGLTF.preload("models/library.glb");
